Generated: 2025-06-28 05:06:37
Model: Claude Sonnet 4 (Fast, Efficient)
Processing Mode: Chunked (7 chunks)
==================================================


=== app/Http/Controllers ANALYSIS ===
Looking at the controllers and views structure, I can see several issues that need to be addressed. The main problems are:

1. **Inconsistent use of reusable components** - Controllers are not properly utilizing the partials system
2. **Missing standardized response patterns** - Some controllers don't use the base Controller's response methods
3. **Inconsistent validation and error handling**
4. **Views not properly structured to use reusable components**

Let me fix these issues by updating the controllers and creating/updating the necessary view files to use the reusable components properly.

## Controller Updates

UPDATE FILE: app/Http/Controllers/Admin/BlogCategoryController.php
```php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\BlogCategoryModel;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Log;

class BlogCategoryController extends Controller
{
    private const STATUS_ACTIVE = 'active';
    private const STATUS_INACTIVE = 'inactive';

    public function list()
    {
        try {
            $data = [
                'header_title' => 'فئات المدونة',
                'page_title' => 'إدارة فئات المدونة',
                'breadcrumb' => [
                    ['name' => 'الرئيسية', 'url' => route('admin.dashboard')],
                    ['name' => 'فئات المدونة', 'url' => null]
                ],
                'getRecord' => BlogCategoryModel::getRecord(),
                'table_config' => [
                    'headers' => [
                        'ID' => 'id',
                        'الاسم' => 'name',
                        'الرابط' => 'slug',
                        'الحالة' => 'status',
                        'تاريخ الإنشاء' => 'created_at',
                        'الإجراءات' => 'actions'
                    ],
                    'searchable' => true,
                    'sortable' => true,
                    'add_new_url' => route('admin.blog_category.add'),
                    'add_new_text' => 'إضافة فئة جديدة'
                ]
            ];

            return $this->viewResponse('admin.blog_category.list', $data, 'فئات المدونة');
        } catch (\Exception $e) {
            Log::error('Blog category list error: ' . $e->getMessage());
            return redirect()->route('admin.dashboard')->with('error', 'حدث خطأ أثناء تحميل فئات المدونة');
        }
    }

    public function add()
    {
        $data = [
            'header_title' => 'إضافة فئة مدونة',
            'page_title' => 'إضافة فئة مدونة جديدة',
            'breadcrumb' => [
                ['name' => 'الرئيسية', 'url' => route('admin.dashboard')],
                ['name' => 'فئات المدونة', 'url' => route('admin.blog_category.list')],
                ['name' => 'إضافة جديد', 'url' => null]
            ],
            'form_config' => [
                'action' => route('admin.blog_category.insert'),
                'method' => 'POST',
                'back_url' => route('admin.blog_category.list')
            ]
        ];

        return $this->viewResponse('admin.blog_category.add', $data, 'إضافة فئة مدونة');
    }

    public function insert(Request $request)
    {
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'slug' => 'nullable|string|max:255|unique:blog_category,slug',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:500',
            'meta_description' => 'nullable|string|max:1000',
            'status' => 'required|in:active,inactive'
        ], [
            'name.required' => 'اسم الفئة مطلوب',
            'name.max' => 'اسم الفئة طويل جداً',
            'slug.unique' => 'هذا الرابط مستخدم مسبقاً',
            'status.required' => 'حالة الفئة مطلوبة',
            'status.in' => 'حالة الفئة غير صحيحة'
        ]);

        try {
            $slug = $validatedData['slug'] ?: Str::slug($validatedData['name'], "-");
            
            // Check if generated slug exists
            if (BlogCategoryModel::where('slug', $slug)->exists()) {
                $slug = $slug . '-' . time();
            }

            $blogCategory = BlogCategoryModel::create([
                'name' => trim($validatedData['name']),
                'slug' => $slug,
                'meta_title' => trim($validatedData['meta_title'] ?? ''),
                'meta_keyword' => trim($validatedData['meta_keyword'] ?? ''),
                'meta_description' => trim($validatedData['meta_description'] ?? ''),
                'status' => $validatedData['status'],
                'is_delete' => 0
            ]);

            if ($request->expectsJson()) {
                return $this->successResponse($blogCategory, 'تم إنشاء فئة المدونة بنجاح', 201);
            }

            return $this->redirectWithMessage('admin/blog_category/list', 'تم إنشاء فئة المدونة بنجاح');

        } catch (\Exception $e) {
            Log::error('Blog category creation error: ' . $e->getMessage());

            if ($request->expectsJson()) {
                return $this->errorResponse('حدث خطأ أثناء إنشاء فئة المدونة', 500);
            }

            return redirect()->back()
                ->with('error', 'حدث خطأ أثناء إنشاء فئة المدونة')
                ->withInput();
        }
    }

    public function edit($id)
    {
        try {
            $blogCategory = BlogCategoryModel::getSingle($id);

            if (!$blogCategory) {
                return redirect()->route('admin.blog_category.list')->with('error', 'فئة المدونة غير موجودة');
            }

            $data = [
                'header_title' => 'تعديل فئة المدونة',
                'page_title' => 'تعديل فئة المدونة: ' . $blogCategory->name,
                'breadcrumb' => [
                    ['name' => 'الرئيسية', 'url' => route('admin.dashboard')],
                    ['name' => 'فئات المدونة', 'url' => route('admin.blog_category.list')],
                    ['name' => 'تعديل', 'url' => null]
                ],
                'getRecord' => $blogCategory,
                'form_config' => [
                    'action' => route('admin.blog_category.update', $id),
                    'method' => 'PUT',
                    'back_url' => route('admin.blog_category.list')
                ]
            ];

            return $this->viewResponse('admin.blog_category.edit', $data, 'تعديل فئة المدونة');

        } catch (\Exception $e) {
            Log::error('Blog category edit error: ' . $e->getMessage());
            return redirect()->route('admin.blog_category.list')->with('error', 'حدث خطأ أثناء تحميل فئة المدونة');
        }
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'slug' => 'required|string|max:255|unique:blog_category,slug,' . $id,
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:500',
            'meta_description' => 'nullable|string|max:1000',
            'status' => 'required|in:active,inactive'
        ], [
            'name.required' => 'اسم الفئة مطلوب',
            'slug.required' => 'رابط الفئة مطلوب',
            'slug.unique' => 'هذا الرابط مستخدم مسبقاً',
            'status.required' => 'حالة الفئة مطلوبة'
        ]);

        try {
            $blogCategory = BlogCategoryModel::getSingle($id);

            if (!$blogCategory) {
                if ($request->expectsJson()) {
                    return $this->errorResponse('فئة المدونة غير موجودة', 404);
                }
                return redirect()->route('admin.blog_category.list')->with('error', 'فئة المدونة غير موجودة');
            }

            $blogCategory->update([
                'name' => trim($validatedData['name']),
                'slug' => trim($validatedData['slug']),
                'meta_title' => trim($validatedData['meta_title'] ?? ''),
                'meta_keyword' => trim($validatedData['meta_keyword'] ?? ''),
                'meta_description' => trim($validatedData['meta_description'] ?? ''),
                'status' => $validatedData['status']
            ]);

            if ($request->expectsJson()) {
                return $this->successResponse($blogCategory, 'تم تحديث فئة المدونة بنجاح');
            }

            return $this->redirectWithMessage('admin/blog_category/list', 'تم تحديث فئة المدونة بنجاح');

        } catch (\Exception $e) {
            Log::error('Blog category update error: ' . $e->getMessage());

            if ($request->expectsJson()) {
                return $this->errorResponse('حدث خطأ أثناء تحديث فئة المدونة', 500);
            }

            return redirect()->back()
                ->with('error', 'حدث خطأ أثناء تحديث فئة المدونة')
                ->withInput();
        }
    }

    public function delete(Request $request, $id)
    {
        try {
            $blogCategory = BlogCategoryModel::getSingle($id);

            if (!$blogCategory) {
                if ($request->expectsJson()) {
                    return $this->errorResponse('فئة المدونة غير موجودة', 404);
                }
                return redirect()->back()->with('error', 'فئة المدونة غير موجودة');
            }

            $blogCategory->update(['is_delete' => 1]);

            if ($request->expectsJson()) {
                return $this->successResponse(null, 'تم حذف فئة المدونة بنجاح');
            }

            return redirect()->back()->with('success', 'تم حذف فئة المدونة بنجاح');

        } catch (\Exception $e) {
            Log::error('Blog category deletion error: ' . $e->getMessage());

            if ($request->expectsJson()) {
                return $this->errorResponse('حدث خطأ أثناء حذف فئة المدونة', 500);
            }

            return redirect()->back()->with('error', 'حدث خطأ أثناء حذف فئة المدونة');
        }
    }

    public function changeStatus(Request $request, $id)
    {
        $request->validate(['status' => 'required|in:active,inactive']);

        try {
            $blogCategory = BlogCategoryModel::getSingle($id);

            if (!$blogCategory) {
                return $this->errorResponse('فئة المدونة غير موجودة', 404);
            }

            $blogCategory->update(['status' => $request->status]);

            $statusText = [
                self::STATUS_ACTIVE => 'نشطة',
                self::STATUS_INACTIVE => 'غير نشطة'
            ];

            return $this->successResponse([
                'category_id' => $blogCategory->id,
                'status' => $blogCategory->status,
                'status_text' => $statusText[$request->status]
            ], 'تم تغيير حالة فئة المدونة إلى: ' . $statusText[$request->status]);

        } catch (\Exception $e) {
            Log::error('Blog category status change error: ' . $e->getMessage());
            return $this->errorResponse('حدث خطأ أثناء تغيير حالة فئة المدونة', 500);
        }
    }

    public function bulkAction(Request $request)
    {
        $request->validate([
            'action' => 'required|in:activate,deactivate,delete',
            'ids' => 'required|array|min:1',
            'ids.*' => 'required|integer|exists:blog_category,id'
        ]);

        try {
            $ids = $request->ids;
            $action = $request->action;
            $affectedCount = 0;

            switch ($action) {
                case 'activate':
                    $affectedCount = BlogCategoryModel::whereIn('id', $ids)->update(['status' => self::STATUS_ACTIVE]);
                    $message = "تم تفعيل {$affectedCount} فئة بنجاح";
                    break;
                case 'deactivate':
                    $affectedCount = BlogCategoryModel::whereIn('id', $ids)->update(['status' => self::STATUS_INACTIVE]);
                    $message = "تم إلغاء تفعيل {$affectedCount} فئة بنجاح";
                    break;
                case 'delete':
                    $affectedCount = BlogCategoryModel::whereIn('id', $ids)->update(['is_delete' => 1]);
                    $message = "تم حذف {$affectedCount} فئة بنجاح";
                    break;
            }

            return $this->successResponse([
                'affected_count' => $affectedCount,
                'action' => $action
            ], $message);

        } catch (\Exception $e) {
            Log::error('Blog category bulk action error: ' . $e->getMessage());
            return $this->errorResponse('حدث خطأ أثناء تنفيذ العملية المجمعة', 500);
        }
    }
}
```

UPDATE FILE: app/Http/Controllers/Admin/BlogController.php
```php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\BlogCategoryModel;
use App\Models\BlogModel;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Log;

class BlogController extends Controller
{
    private const STATUS_ACTIVE = 'active';
    private const STATUS_INACTIVE = 'inactive';

    public function list()
    {
        try {
            $data = [
                'header_title' => 'المدونة',
                'page_title' => 'إدارة مقالات المدونة',
                'breadcrumb' => [
                    ['name' => 'الرئيسية', 'url' => route('admin.dashboard')],
                    ['name' => 'المدونة', 'url' => null]
                ],
                'getRecord' => BlogModel::getRecord(),
                'table_config' => [
                    'headers' => [
                        'ID' => 'id',
                        'العنوان' => 'title',
                        'الفئة' => 'category',
                        'الكاتب' => 'author',
                        'الحالة' => 'status',
                        'تاريخ النشر' => 'publish_date',
                        'الإجراءات' => 'actions'
                    ],
                    'searchable' => true,
                    'sortable' => true,
                    'add_new_url' => route('admin.blog.add'),
                    'add_new_text' => 'إضافة مقال جديد'
                ]
            ];

            return $this->viewResponse('admin.blog.list', $data, 'مقالات المدونة');
        } catch (\Exception $e) {
            Log::error('Blog list error: ' . $e->getMessage());
            return redirect()->route('admin.dashboard')->with('error', 'حدث خطأ أثناء تحميل مقالات المدونة');
        }
    }

    public function add()
    {
        $data = [
            'header_title' => 'إضافة مقال',
            'page_title' => 'إضافة مقال جديد',
            'breadcrumb' => [
                ['name' => 'الرئيسية', 'url' => route('admin.dashboard')],
                ['name' => 'المدونة', 'url' => route('admin.blog.list')],
                ['name' => 'إضافة جديد', 'url' => null]
            ],
            'getBlogCategory' => BlogCategoryModel::getRecordActive(),
            'form_config' => [
                'action' => route('admin.blog.insert'),
                'method' => 'POST',
                'back_url' => route('admin.blog.list'),
                'has_file' => true
            ]
        ];

        return $this->viewResponse('admin.blog.add', $data, 'إضافة مقال');
    }

    public function insert(Request $request)
    {
        $validatedData = $request->validate([
            'title' => 'required|string|max:255',
            'slug' => 'nullable|string|max:255|unique:blog,slug',
            'blog_category_id' => 'required|exists:blog_category,id',
            'description' => 'nullable|string',
            'short_description' => 'nullable|string|max:500',
            'image_name' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:500',
            'meta_description' => 'nullable|string|max:1000',
            'status' => 'required|in:active,inactive',
            'is_publish' => 'required|in:0,1',
            'publish_date' => 'nullable|date'
        ], [
            'title.required' => 'عنوان المقال مطلوب',
            'blog_category_id.required' => 'فئة المقال مطلوبة',
            'blog_category_id.exists' => 'فئة المقال غير موجودة',
            'image_name.image' => 'يجب أن يكون الملف صورة',
            'image_name.mimes' => 'صيغة الصورة غير مدعومة',
            'image_name.max' => 'حجم الصورة كبير جداً',
            'status.required' => 'حالة المقال مطلوبة'
        ]);

        try {
            $slug = $validatedData['slug'] ?: Str::slug($validatedData['title'], "-");
            
            // Check if generated slug exists
            if (BlogModel::where('slug', $slug)->exists()) {
                $slug = $slug . '-' . time();
            }

            $blogData = [
                'title' => trim($validatedData['title']),
                'slug' => $slug,
                'blog_category_id' => $validatedData['blog_category_id'],
                'description' => trim($validatedData['description'] ?? ''),
                'short_description' => trim($validatedData['short_description'] ?? ''),
                'meta_title' => trim($validatedData['meta_title'] ?? ''),
                'meta_keyword' => trim($validatedData['meta_keyword'] ?? ''),
                'meta_description' => trim($validatedData['meta_description'] ?? ''),
                'status' => $validatedData['status'],
                'is_publish' => $validatedData['is_publish'],
                'publish_date' => $validatedData['publish_date'],
                'is_delete' => 0
            ];

            // Handle image upload
            if ($request->hasFile('image_name')) {
                $image = $request->file('image_name');
                $imageName = time() . '_' . Str::random(10) . '.' . $image->getClientOriginalExtension();
                $image->move(public_path('upload/blog'), $imageName);
                $blogData['image_name'] = $imageName;
            }

            $blog = BlogModel::create($blogData);

            if ($request->expectsJson()) {
                return $this->successResponse($blog, 'تم إنشاء المقال بنجاح', 201);
            }

            return $this->redirectWithMessage('admin/blog/list', 'تم إنشاء المقال بنجاح');

        } catch (\Exception $e) {
            Log::error('Blog creation error: ' . $e->getMessage());

            if ($request->expectsJson()) {
                return $this->errorResponse('حدث خطأ أثناء إنشاء المقال', 500);
            }

            return redirect()->back()
                ->with('error', 'حدث خطأ أثناء إنشاء المقال')
                ->withInput();
        }
    }

    public function edit($id)
    {
        try {
            $blog = BlogModel::getSingle($id);

            if (!$blog) {
                return redirect()->route('admin.blog.list')->with('error', 'المقال غير موجود');
            }

            $data = [
                'header_title' => 'تعديل المقال',
                'page_title' => 'تعديل المقال: ' . $blog->title,
                'breadcrumb' => [
                    ['name' => 'الرئيسية', 'url' => route('admin.dashboard')],
                    ['name' => 'المدونة', 'url' => route('admin.blog.list')],
                    ['name' => 'تعديل', 'url' => null]
                ],
                'getRecord' => $blog,
                'getBlogCategory' => BlogCategoryModel::getRecordActive(),
                'form_config' => [
                    'action' => route('admin.blog.update', $id),
                    'method' => 'PUT',
                    'back_url' => route('admin.blog.list'),
                    'has_file' => true
                ]
            ];

            return $this->viewResponse('admin.blog.edit', $data, 'تعديل المقال');

        } catch (\Exception $e) {
            Log::error('Blog edit error: ' . $e->getMessage());
            return redirect()->route('admin.blog.list')->with('error', 'حدث خطأ أثناء تحميل المقال');
        }
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'title' => 'required|string|max:255',
            'slug' => 'required|string|max:255|unique:blog,slug,' . $id,
            'blog_category_id' => 'required|exists:blog_category,id',
            'description' => 'nullable|string',
            'short_description' => 'nullable|string|max:500',
            'image_name' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:500',
            'meta_description' => 'nullable|string|max:1000',
            'status' => 'required|in:active,inactive',
            'is_publish' => 'required|in:0,1',
            'publish_date' => 'nullable|date'
        ], [
            'title.required' => 'عنوان المقال مطلوب',
            'slug.required' => 'رابط المقال مطلوب',
            'slug.unique' => 'هذا الرابط مستخدم مسبقاً',
            'blog_category_id.required' => 'فئة المقال مطلوبة',
            'image_name.image' => 'يجب أن يكون الملف صورة',
            'status.required' => 'حالة المقال مطلوبة'
        ]);

        try {
            $blog = BlogModel::getSingle($id);

            if (!$blog) {
                if ($request->expectsJson()) {
                    return $this->errorResponse('المقال غير موجود', 404);
                }
                return redirect()->route('admin.blog.list')->with('error', 'المقال غير موجود');
            }

            $blogData = [
                'title' => trim($validatedData['title']),
                'slug' => trim($validatedData['slug']),
                'blog_category_id' => $validatedData['blog_category_id'],
                'description' => trim($validatedData['description'] ?? ''),
                'short_description' => trim($validatedData['short_description'] ?? ''),
                'meta_title' => trim($validatedData['meta_title'] ?? ''),
                'meta_keyword' => trim($validatedData['meta_keyword'] ?? ''),
                'meta_description' => trim($validatedData['meta_description'] ?? ''),
                'status' => $validatedData['status'],
                'is_publish' => $validatedData['is_publish'],
                'publish_date' => $validatedData['publish_date']
            ];

            // Handle image upload
            if ($request->hasFile('image_name')) {
                // Delete old image
                if ($blog->image_name && file_exists(public_path('upload/blog/' . $blog->image_name))) {
                    unlink(public_path('upload/blog/' . $blog->image_name));
                }

                $image = $request->file('image_name');
                $imageName = time() . '_' . Str::random(10) . '.' . $image->getClientOriginalExtension();
                $image->move(public_path('upload/blog'), $imageName);
                $blogData['image_name'] = $imageName;
            }

            $blog->update($blogData);

            if ($request->expectsJson()) {
                return $this->successResponse($blog, 'تم تحديث المقال بنجاح');
            }

            return $this->redirectWithMessage('admin/blog/list', 'تم تحديث المقال بنجاح');

        } catch (\Exception $e) {
            Log::error('Blog update error: ' . $e->getMessage());

            if ($request->expectsJson()) {
                return $this->errorResponse('حدث خطأ أثناء تحديث المقال', 500);
            }

            return redirect()->back()
                ->with('error', 'حدث خطأ أثناء تحديث المقال')
                ->withInput();
        }
    }

    public function delete(Request $request, $id)
    {
        try {
            $blog = BlogModel::getSingle($id);

            if (!$blog) {
                if ($request->expectsJson()) {
                    return $this->errorResponse('المقال غير موجود', 404);
                }
                return redirect()->back()->with('error', 'المقال غير موجود');
            }

            // Delete image file
            if ($blog->image_name && file_exists(public_path('upload/blog/' . $blog->image_name))) {
                unlink(public_path('upload/blog/' . $blog->image_name));
            }

            $blog->update(['is_delete' => 1]);

            if ($request->expectsJson()) {
                return $this->successResponse(null, 'تم حذف المقال بنجاح');
            }

            return redirect()->back()->with('success', 'تم حذف المقال بنجاح');

        } catch (\Exception $e) {
            Log::error('Blog deletion error: ' . $e->getMessage());

            if ($request->expectsJson()) {
                return $this->errorResponse('حدث خطأ أثناء حذف المقال', 500);
            }

            return redirect()->back()->with('error', 'حدث خطأ أثناء حذف المقال');
        }
    }

    public function changeStatus(Request $request, $id)
    {
        $request->validate(['status' => 'required|in:active,inactive']);

        try {
            $blog = BlogModel::getSingle($id);

            if (!$blog) {
                return $this->errorResponse('المقال غير موجود', 404);
            }

            $blog->update(['status' => $request->status]);

            $statusText = [
                self::STATUS_ACTIVE => 'نشط',
                self::STATUS_INACTIVE => 'غير نشط'
            ];

            return $this->successResponse([
                'blog_id' => $blog->id,
                'status' => $blog->status,
                'status_text' => $statusText[$request->status]
            ], 'تم تغيير حالة المقال إلى: ' . $statusText[$request->status]);

        } catch (\Exception $e) {
            Log::error('Blog status change error: ' . $e->getMessage());
            return $this->errorResponse('حدث خطأ أثناء تغيير حالة المقال', 500);
        }
    }

    public function togglePublish(Request $request, $id)
    {
        $request->validate(['is_publish' => 'required|in:0,1']);

        try {
            $blog = BlogModel::getSingle($id);

            if (!$blog) {
                return $this->errorResponse('المقال غير موجود', 404);
            }

            $blog->update(['is_publish' => $request->is_publish]);

            $publishText = $request->is_publish ? 'منشور' : 'غير منشور';

            return $this->successResponse([
                'blog_id' => $blog->id,
                'is_publish' => $blog->is_publish,
                'publish_text' => $publishText
            ], 'تم تغيير حالة النشر إلى: ' . $publishText);

        } catch (\Exception $e) {
            Log::error('Blog publish toggle error: ' . $e->getMessage());
            return $this->errorResponse('حدث خطأ أثناء تغيير حالة النشر', 500);
        }
    }
}
```

Now let me create the updated view files using the reusable components:

CREATE FILE: resources/views/admin/blog_category/list.blade.php
```php
@extends('admin.layouts.app')

@push('styles')
<link rel="stylesheet" href="{{ asset('

=== app/Models ANALYSIS ===
Looking at the project structure, I can see that this is a Laravel e-commerce application with car parts/services, but the `app/Models` folder is completely empty. Based on the controllers and views, I need to create all the missing Eloquent models that the application requires.

Let me analyze the controllers and views to identify all required models and create them with proper relationships, attributes, and methods.

## CREATE DIRECTORY: app/Models

## CREATE FILE: app/Models/User.php
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\SoftDeletes;

class User extends Authenticatable
{
    use HasFactory, Notifiable, SoftDeletes;

    protected $fillable = [
        'name',
        'email',
        'email_verified_at',
        'password',
        'user_type',
        'phone',
        'address',
        'city',
        'state',
        'zip_code',
        'country',
        'status',
        'remember_token',
        'profile_pic',
        'last_login_at',
        'google_id',
        'facebook_id'
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'last_login_at' => 'datetime',
        'password' => 'hashed',
    ];

    const USER_TYPE_ADMIN = 1;
    const USER_TYPE_CUSTOMER = 2;

    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;

    public function orders()
    {
        return $this->hasMany(OrderModel::class);
    }

    public function wishlist()
    {
        return $this->hasMany(Wishlist::class);
    }

    public function cartItems()
    {
        return $this->hasMany(CartItem::class);
    }

    public function notifications()
    {
        return $this->hasMany(Notification::class);
    }

    public function isAdmin()
    {
        return $this->user_type == self::USER_TYPE_ADMIN;
    }

    public function isCustomer()
    {
        return $this->user_type == self::USER_TYPE_CUSTOMER;
    }

    public function isActive()
    {
        return $this->status == self::STATUS_ACTIVE;
    }

    public function getFullNameAttribute()
    {
        return $this->name;
    }

    public function getProfilePicUrlAttribute()
    {
        if ($this->profile_pic) {
            return asset('storage/profile_pics/' . $this->profile_pic);
        }
        return asset('assets/images/default-avatar.png');
    }
}
```

## CREATE FILE: app/Models/CarMake.php
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class CarMake extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'car_makes';

    protected $fillable = [
        'name',
        'name_ar',
        'slug',
        'image',
        'status',
        'sort_order',
        'is_popular',
        'meta_title',
        'meta_description',
        'meta_keywords'
    ];

    protected $casts = [
        'status' => 'boolean',
        'is_popular' => 'boolean',
        'sort_order' => 'integer'
    ];

    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;

    public function carModels()
    {
        return $this->hasMany(CarModel::class);
    }

    public function products()
    {
        return $this->belongsToMany(Product::class, 'product_car_makes');
    }

    public function productsByCar()
    {
        return $this->hasMany(ProductByCar::class);
    }

    public function services()
    {
        return $this->belongsToMany(Service::class, 'service_car_makes');
    }

    public function scopeActive($query)
    {
        return $query->where('status', self::STATUS_ACTIVE);
    }

    public function scopePopular($query)
    {
        return $query->where('is_popular', true);
    }

    public function getImageUrlAttribute()
    {
        if ($this->image) {
            return asset('storage/car_makes/' . $this->image);
        }
        return asset('assets/images/default-car-make.png');
    }

    public function getStatusTextAttribute()
    {
        return $this->status ? 'Active' : 'Inactive';
    }

    public function getPopularTextAttribute()
    {
        return $this->is_popular ? 'Yes' : 'No';
    }
}
```

## CREATE FILE: app/Models/CarModel.php
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class CarModel extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'car_models';

    protected $fillable = [
        'car_make_id',
        'name',
        'name_ar',
        'slug',
        'year_from',
        'year_to',
        'engine_size',
        'fuel_type',
        'transmission',
        'body_type',
        'status',
        'sort_order',
        'meta_title',
        'meta_description',
        'meta_keywords'
    ];

    protected $casts = [
        'status' => 'boolean',
        'year_from' => 'integer',
        'year_to' => 'integer',
        'sort_order' => 'integer'
    ];

    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;

    const FUEL_TYPE_PETROL = 'petrol';
    const FUEL_TYPE_DIESEL = 'diesel';
    const FUEL_TYPE_ELECTRIC = 'electric';
    const FUEL_TYPE_HYBRID = 'hybrid';

    const TRANSMISSION_MANUAL = 'manual';
    const TRANSMISSION_AUTOMATIC = 'automatic';
    const TRANSMISSION_CVT = 'cvt';

    public function carMake()
    {
        return $this->belongsTo(CarMake::class);
    }

    public function products()
    {
        return $this->belongsToMany(Product::class, 'product_car_models');
    }

    public function productsByCar()
    {
        return $this->hasMany(ProductByCar::class);
    }

    public function services()
    {
        return $this->belongsToMany(Service::class, 'service_car_models');
    }

    public function scopeActive($query)
    {
        return $query->where('status', self::STATUS_ACTIVE);
    }

    public function scopeByMake($query, $makeId)
    {
        return $query->where('car_make_id', $makeId);
    }

    public function getStatusTextAttribute()
    {
        return $this->status ? 'Active' : 'Inactive';
    }

    public function getYearRangeAttribute()
    {
        if ($this->year_from && $this->year_to) {
            return $this->year_from . ' - ' . $this->year_to;
        } elseif ($this->year_from) {
            return $this->year_from . '+';
        }
        return 'N/A';
    }

    public function getFullNameAttribute()
    {
        return $this->carMake->name . ' ' . $this->name;
    }
}
```

## CREATE FILE: app/Models/Product.php
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Product extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'title',
        'title_ar',
        'slug',
        'sku',
        'short_description',
        'short_description_ar',
        'description',
        'description_ar',
        'additional_information',
        'additional_information_ar',
        'price',
        'old_price',
        'cost_price',
        'track_qty',
        'qty',
        'min_qty',
        'status',
        'category_id',
        'sub_category_id',
        'brand_id',
        'is_featured',
        'is_bestseller',
        'is_new_arrival',
        'weight',
        'dimensions',
        'warranty',
        'warranty_ar',
        'meta_title',
        'meta_description',
        'meta_keywords',
        'sort_order'
    ];

    protected $casts = [
        'price' => 'decimal:2',
        'old_price' => 'decimal:2',
        'cost_price' => 'decimal:2',
        'status' => 'boolean',
        'track_qty' => 'boolean',
        'is_featured' => 'boolean',
        'is_bestseller' => 'boolean',
        'is_new_arrival' => 'boolean',
        'qty' => 'integer',
        'min_qty' => 'integer',
        'sort_order' => 'integer'
    ];

    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;

    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function subCategory()
    {
        return $this->belongsTo(SubCategory::class);
    }

    public function brand()
    {
        return $this->belongsTo(Brand::class);
    }

    public function productImages()
    {
        return $this->hasMany(ProductImage::class)->orderBy('sort_order');
    }

    public function carMakes()
    {
        return $this->belongsToMany(CarMake::class, 'product_car_makes');
    }

    public function carModels()
    {
        return $this->belongsToMany(CarModel::class, 'product_car_models');
    }

    public function orderItems()
    {
        return $this->hasMany(OrderItem::class);
    }

    public function cartItems()
    {
        return $this->hasMany(CartItem::class);
    }

    public function wishlist()
    {
        return $this->hasMany(Wishlist::class);
    }

    public function colors()
    {
        return $this->belongsToMany(Color::class, 'product_colors');
    }

    public function sizes()
    {
        return $this->belongsToMany(Size::class, 'product_sizes');
    }

    public function scopeActive($query)
    {
        return $query->where('status', self::STATUS_ACTIVE);
    }

    public function scopeFeatured($query)
    {
        return $query->where('is_featured', true);
    }

    public function scopeBestseller($query)
    {
        return $query->where('is_bestseller', true);
    }

    public function scopeNewArrival($query)
    {
        return $query->where('is_new_arrival', true);
    }

    public function scopeInStock($query)
    {
        return $query->where('qty', '>', 0);
    }

    public function getMainImageAttribute()
    {
        $firstImage = $this->productImages()->first();
        if ($firstImage) {
            return asset('storage/products/' . $firstImage->image);
        }
        return asset('assets/images/default-product.png');
    }

    public function getDiscountPercentageAttribute()
    {
        if ($this->old_price && $this->old_price > $this->price) {
            return round((($this->old_price - $this->price) / $this->old_price) * 100);
        }
        return 0;
    }

    public function isInStock()
    {
        return $this->qty > 0;
    }

    public function getStatusTextAttribute()
    {
        return $this->status ? 'Active' : 'Inactive';
    }

    public function getStockStatusAttribute()
    {
        if (!$this->track_qty) {
            return 'In Stock';
        }
        
        if ($this->qty <= 0) {
            return 'Out of Stock';
        } elseif ($this->qty <= $this->min_qty) {
            return 'Low Stock';
        }
        
        return 'In Stock';
    }
}
```

## CREATE FILE: app/Models/ProductByCar.php
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class ProductByCar extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'products_by_car';

    protected $fillable = [
        'title',
        'title_ar',
        'slug',
        'sku',
        'short_description',
        'short_description_ar',
        'description',
        'description_ar',
        'additional_information',
        'additional_information_ar',
        'price',
        'old_price',
        'cost_price',
        'track_qty',
        'qty',
        'min_qty',
        'status',
        'car_make_id',
        'car_model_id',
        'year_from',
        'year_to',
        'engine_size',
        'category_id',
        'sub_category_id',
        'brand_id',
        'is_featured',
        'is_bestseller',
        'is_new_arrival',
        'weight',
        'dimensions',
        'warranty',
        'warranty_ar',
        'meta_title',
        'meta_description',
        'meta_keywords',
        'sort_order'
    ];

    protected $casts = [
        'price' => 'decimal:2',
        'old_price' => 'decimal:2',
        'cost_price' => 'decimal:2',
        'status' => 'boolean',
        'track_qty' => 'boolean',
        'is_featured' => 'boolean',
        'is_bestseller' => 'boolean',
        'is_new_arrival' => 'boolean',
        'qty' => 'integer',
        'min_qty' => 'integer',
        'year_from' => 'integer',
        'year_to' => 'integer',
        'sort_order' => 'integer'
    ];

    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;

    public function carMake()
    {
        return $this->belongsTo(CarMake::class);
    }

    public function carModel()
    {
        return $this->belongsTo(CarModel::class);
    }

    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function subCategory()
    {
        return $this->belongsTo(SubCategory::class);
    }

    public function brand()
    {
        return $this->belongsTo(Brand::class);
    }

    public function productImages()
    {
        return $this->hasMany(ProductByCarImage::class)->orderBy('sort_order');
    }

    public function orderItems()
    {
        return $this->hasMany(OrderItem::class);
    }

    public function cartItems()
    {
        return $this->hasMany(CartItem::class);
    }

    public function wishlist()
    {
        return $this->hasMany(Wishlist::class);
    }

    public function colors()
    {
        return $this->belongsToMany(Color::class, 'product_by_car_colors');
    }

    public function sizes()
    {
        return $this->belongsToMany(Size::class, 'product_by_car_sizes');
    }

    public function scopeActive($query)
    {
        return $query->where('status', self::STATUS_ACTIVE);
    }

    public function scopeFeatured($query)
    {
        return $query->where('is_featured', true);
    }

    public function scopeBestseller($query)
    {
        return $query->where('is_bestseller', true);
    }

    public function scopeNewArrival($query)
    {
        return $query->where('is_new_arrival', true);
    }

    public function scopeInStock($query)
    {
        return $query->where('qty', '>', 0);
    }

    public function scopeByCarMake($query, $makeId)
    {
        return $query->where('car_make_id', $makeId);
    }

    public function scopeByCarModel($query, $modelId)
    {
        return $query->where('car_model_id', $modelId);
    }

    public function getMainImageAttribute()
    {
        $firstImage = $this->productImages()->first();
        if ($firstImage) {
            return asset('storage/products_by_car/' . $firstImage->image);
        }
        return asset('assets/images/default-product.png');
    }

    public function getDiscountPercentageAttribute()
    {
        if ($this->old_price && $this->old_price > $this->price) {
            return round((($this->old_price - $this->price) / $this->old_price) * 100);
        }
        return 0;
    }

    public function isInStock()
    {
        return $this->qty > 0;
    }

    public function getStatusTextAttribute()
    {
        return $this->status ? 'Active' : 'Inactive';
    }

    public function getYearRangeAttribute()
    {
        if ($this->year_from && $this->year_to) {
            return $this->year_from . ' - ' . $this->year_to;
        } elseif ($this->year_from) {
            return $this->year_from . '+';
        }
        return 'N/A';
    }

    public function getCarInfoAttribute()
    {
        $info = '';
        if ($this->carMake) {
            $info .= $this->carMake->name;
        }
        if ($this->carModel) {
            $info .= ' ' . $this->carModel->name;
        }
        if ($this->year_range !== 'N/A') {
            $info .= ' (' . $this->year_range . ')';
        }
        return trim($info);
    }
}
```

## CREATE FILE: app/Models/Service.php
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Service extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'name',
        'name_ar',
        'slug',
        'short_description',
        'short_description_ar',
        'description',
        'description_ar',
        'image',
        'icon',
        'price',
        'duration',
        'duration_ar',
        'status',
        'is_featured',
        'is_popular',
        'meta_title',
        'meta_description',
        'meta_keywords',
        'sort_order'
    ];

    protected $casts = [
        'price' => 'decimal:2',
        'status' => 'boolean',
        'is_featured' => 'boolean',
        'is_popular' => 'boolean',
        'sort_order' => 'integer'
    ];

    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;

    public function subServices()
    {
        return $this->hasMany(SubService::class);
    }

    public function carMakes()
    {
        return $this->belongsToMany(CarMake::class, 'service_car_makes');
    }

    public function carModels()
    {
        return $this->belongsToMany(CarModel::class, 'service_car_models');
    }

    public function orderItems()
    {
        return $this->hasMany(OrderItem::class);
    }

    public function cartItems()
    {
        return $this->hasMany(CartItem::class);
    }

    public function scopeActive($query)
    {
        return $query->where('status', self::STATUS_ACTIVE);
    }

    public function scopeFeatured($query)
    {
        return $query->where('is_featured', true);
    }

    public function scopePopular($query)
    {
        return $query->where('is_popular', true);
    }

    public function getImageUrlAttribute()
    {
        if ($this->image) {
            return asset('storage/services/' . $this->image);
        }
        return asset('assets/images/default-service.png');
    }

    public function getIconUrlAttribute()
    {
        if ($this->icon) {
            return asset('storage/services/icons/' . $this->icon);
        }
        return asset('assets/images/default-service-icon.png');
    }

    public function getStatusTextAttribute()
    {
        return $this->status ? 'Active' : 'Inactive';
    }

    public function getActiveSubServicesCountAttribute()
    {
        return $this->subServices()->where('status', SubService::STATUS_ACTIVE)->count();
    }
}
```

## CREATE FILE: app/Models/SubService.php
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class SubService extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'service_id',
        'name',
        'name_ar',
        'slug',
        'short_description',
        'short_description_ar',
        'description',
        'description_ar',
        'image',
        'price',
        'old_price',
        'duration',
        'duration_ar',
        'includes',
        'includes_ar',
        'status',
        'is_featured',
        'is_popular',
        'meta_title',
        'meta_description',
        'meta_keywords',
        'sort_order'
    ];

    protected $casts = [
        'price' => 'decimal:2',
        'old_price' => 'decimal:2',
        'status' => 'boolean',
        'is_featured' => 'boolean',
        'is_popular' => 'boolean',
        'sort_order' => 'integer'
    ];

    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;

    public function service()
    {
        return $this->belongsTo(Service::class);
    }

    public function carMakes()
    {
        return $this->belongsToMany(CarMake::class, 'sub_service_car_makes');
    }

    public function carModels()
    {
        return $this->belongsToMany(CarModel::class, 'sub_service_car_models');
    }

    public function orderItems()
    {
        return $this->hasMany(OrderItem::class);
    }

    public function cartItems()
    {
        return $this->hasMany(CartItem::class);
    }

    public function scopeActive($query)
    {
        return $query->where('status', self::STATUS_ACTIVE);
    }

    public function scopeFeatured($query)
    {
        return $query->where('is_featured', true);
    }

    public function scopePopular($query)
    {
        return $query->where('is_popular', true);
    }

    public function scopeByService($query, $serviceId)
    {
        return $query->where('service_id', $serviceId);
    }

    public function getImageUrlAttribute()
    {
        if ($this->image) {
            return asset('storage/sub_services/' . $this->image);
        }
        return asset('assets/images/default-sub-service.png');
    }

    public function getStatusTextAttribute()
    {
        return $this->status ? 'Active' : 'Inactive';
    }

    public function getDiscountPercentageAttribute()
    {
        if ($this->old_price && $this->old_price > $this->price) {
            return round((($this->old_price - $this->price) / $this->old_price) * 100);
        }
        return 0;
    }

    public function getFullNameAttribute()
    {
        return $this->service->name . ' - ' . $this->name;
    }
}
```

## CREATE FILE: app/Models/Order.php
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Order extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'user_id',
        'order_number',
        'status',
        'payment_status',
        'payment_method',
        'payment_id',
        'transaction_id',
        'subtotal',
        'tax_amount',
        'shipping_amount',
        'discount_amount',
        'discount_code_id',
        'total_amount',
        'currency',
        'first_name',
        'last_name',
        'company',
        'address',
        'apartment',
        'city',
        'state',
        'zip_code',
        'country',
        'phone',
        'email',
        'notes',
        'shipped_date',
        'delivered_date'
    ];

    protected $casts = [
        'subtotal' => 'decimal:2',
        'tax_amount' => 'decimal:2',
        'shipping_amount' => 'decimal:2',
        'discount_amount' => 'decimal:2',
        'total_amount' => 'decimal:2',
        'shipped_date' => 'datetime',
        'delivered_date' => 'datetime'
    ];

    const STATUS_PENDING = 'pending';
    const STATUS_PROCESSING = 'processing';
    const STATUS_SHIPPED = 'shipped';
    const STATUS_DELIVERED = 'delivered';
    const STATUS_CANCELLED = 'cancelled';
    const STATUS_REFUNDED = 'refunded';

    const PAYMENT_STATUS_PENDING = 'pending';
    const PAYMENT_STATUS_PAID = 'paid';
    const PAYMENT_STATUS_FAILED = 'failed';
    const PAYMENT_STATUS_REFUNDED = 'refunded';

    const PAYMENT_METHOD_STRIPE = 'stripe';
    const PAYMENT_METHOD_PAYPAL = 'paypal';
    const PAYMENT_METHOD_COD = 'cod';

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function orderItems()
    {
        return $this->hasMany(OrderItem::class);
    }

    public function discountCode()
    {
        return $this->belongsTo(DiscountCode::class);
    }

    public function notifications()
    {
        return $this->hasMany(Notification::class);
    }

    public function scopePending($query)
    {
        return $query->where('status', self::STATUS_PENDING);
    }

    public function scopeProcessing($query)
    {
        return $query->where('status', self::STATUS_PROCESSING);
    }

    public function scopeShipped($query)
    {
        return $query->where('status', self::STATUS_SHIPPED);
    }

    public function scopeDelivered($query)
    {
        return $query->where('status', self::STATUS_DELIVERED);
    }

    public function scopePaid($query)
    {
        return $query->where('payment_status', self::PAYMENT_STATUS_PAID);
    }

    public function getStatusTextAttribute()
    {
        return ucfirst(str_replace('_', ' ', $this->status));
    }

    public function getPaymentStatusTextAttribute()
    {
        return ucfirst(str_replace('_', ' ', $this->payment_status));
    }

    public function getFullNameAttribute()
    {
        return trim($this->first_name . ' ' . $this->last_name);
    }

    public function getFullAddressAttribute()
    {
        $address = $this->address;
        if ($this->apartment) {
            $address .= ', ' . $this->apartment;
        }
        $address .= ', ' . $this->city;
        if ($this->state) {
            $address .= ', ' . $this->state;
        }
        $address .= ', ' . $this->zip_code;
        if ($this->country) {
            $address .= ', ' . $this->country;
        }
        return $address;
    }

    public function isPaid()
    {
        return $this->payment_status === self::PAYMENT_STATUS_PAID;
    }

    public function canBeCancelled()
    {
        return in_array($this->status, [self::STATUS_PENDING, self::STATUS_PROCESSING]);
    }

    public function canBeRefunded()
    {
        return $this->status === self::STATUS_DELIVERED && $this->isPaid();
    }

    protected static function boot()
    {
        parent::boot();

        static::creating(function ($order) {
            if (!$order->order_number) {
                $order->order_number = 'ORD-' . date('Y') . '-' . str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);
            }
        });
    }
}
```

## CREATE FILE: app/Models/OrderItem.php
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class OrderItem extends Model
{
    use HasFactory;

    protected $fillable = [
        'order_id',
        'product_id',
        'product_by_car_id',
        'service_id',
        'sub_service_id',
        'name',
        'price',
        'qty',
        'total',
        'product_info'
    ];

    protected $casts = [
        'price' => 'decimal:2',
        'total' => 'decimal:2',
        'qty' => 'integer',
        'product_info' => 'array'
    ];

    public function order()
    {
        return $this->belongsTo(OrderModel::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }

    public function productByCar()
    {
        return $this->belongsTo(ProductByCar::class);
    }

    public function service()
    {
        return $this->belongsTo(Service::class);
    }

    public function subService()
    {
        return $this->belongsTo(SubService::class);
    }

    public function getItemTypeAttribute

=== resources/views/admin ANALYSIS ===
Looking at the resources/views/admin folder, I can see several issues that need to be addressed to make the views consistent with the controllers and leverage the reusable components in the partials folder. Let me provide a comprehensive fix.

## Issues Identified:

1. **Inconsistent component usage** - Some views use partials while others don't
2. **Mixed languages** - Some views are in Arabic, others in English
3. **Inconsistent styling and structure** 
4. **Missing proper form validation display**
5. **Not leveraging existing reusable components**
6. **Inconsistent table structures**

Let me fix these systematically:

## 1. First, let's update the blog views to use reusable components:

UPDATE FILE: resources/views/admin/blog/add.blade.php
```php
@extends('admin.layouts.app')

@section('content')
@include('admin.partials.components.layouts.page-wrapper', [
    'title' => 'إضافة مقال جديد',
    'breadcrumbs' => [
        ['url' => route('admin.dashboard'), 'title' => 'الرئيسية'],
        ['url' => route('admin.blog.list'), 'title' => 'المقالات'],
        ['title' => 'إضافة مقال']
    ]
])

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-plus mr-2"></i>
                        إضافة مقال جديد
                    </h3>
                    <div class="card-tools">
                        <a href="{{ route('admin.blog.list') }}" class="btn btn-tool" title="العودة للقائمة">
                            <i class="fas fa-arrow-left"></i>
                        </a>
                    </div>
                </div>

                <form action="{{ route('admin.blog.store') }}" method="POST" enctype="multipart/form-data" id="blogForm">
                    @csrf
                    <div class="card-body">
                        <div class="row">
                            <!-- Title -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'title',
                                    'label' => 'عنوان المقال',
                                    'value' => old('title'),
                                    'placeholder' => 'أدخل عنوان المقال',
                                    'required' => true,
                                    'icon' => 'fas fa-heading'
                                ])
                            </div>

                            <!-- Category -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.select-input', [
                                    'name' => 'blog_category_id',
                                    'label' => 'فئة المقال',
                                    'options' => $getCategory->pluck('name', 'id')->toArray(),
                                    'value' => old('blog_category_id'),
                                    'placeholder' => 'اختر الفئة',
                                    'required' => true,
                                    'icon' => 'fas fa-folder'
                                ])
                            </div>
                        </div>

                        <div class="row">
                            <!-- Status -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.select-input', [
                                    'name' => 'status',
                                    'label' => 'الحالة',
                                    'options' => [
                                        '0' => 'نشط',
                                        '1' => 'غير نشط'
                                    ],
                                    'value' => old('status', '0'),
                                    'required' => true,
                                    'icon' => 'fas fa-toggle-on'
                                ])
                            </div>

                            <!-- Image -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.file-input', [
                                    'name' => 'image_name',
                                    'label' => 'صورة المقال',
                                    'accept' => 'image/*',
                                    'icon' => 'fas fa-image'
                                ])
                            </div>
                        </div>

                        <!-- Short Description -->
                        <div class="row">
                            <div class="col-12">
                                @include('admin.partials.form-fields.textarea-input', [
                                    'name' => 'short_description',
                                    'label' => 'الوصف المختصر',
                                    'value' => old('short_description'),
                                    'placeholder' => 'أدخل وصفاً مختصراً للمقال',
                                    'rows' => 3,
                                    'required' => true,
                                    'icon' => 'fas fa-align-left'
                                ])
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="row">
                            <div class="col-12">
                                @include('admin.partials.form-fields.textarea-input', [
                                    'name' => 'description',
                                    'label' => 'المحتوى',
                                    'value' => old('description'),
                                    'placeholder' => 'أدخل محتوى المقال',
                                    'rows' => 8,
                                    'required' => true,
                                    'class' => 'editor',
                                    'icon' => 'fas fa-edit'
                                ])
                            </div>
                        </div>

                        <!-- SEO Fields -->
                        <div class="row">
                            <div class="col-md-4">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'meta_title',
                                    'label' => 'عنوان SEO',
                                    'value' => old('meta_title'),
                                    'placeholder' => 'عنوان للمحركات البحث',
                                    'required' => true,
                                    'icon' => 'fas fa-search'
                                ])
                            </div>

                            <div class="col-md-4">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'meta_description',
                                    'label' => 'وصف SEO',
                                    'value' => old('meta_description'),
                                    'placeholder' => 'وصف لمحركات البحث',
                                    'icon' => 'fas fa-search'
                                ])
                            </div>

                            <div class="col-md-4">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'meta_keyword',
                                    'label' => 'الكلمات المفتاحية',
                                    'value' => old('meta_keyword'),
                                    'placeholder' => 'كلمات مفتاحية مفصولة بفواصل',
                                    'icon' => 'fas fa-tags'
                                ])
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="card-footer">
                        @include('admin.partials.form-fields.action-buttons', [
                            'cancelRoute' => route('admin.blog.list'),
                            'submitText' => 'حفظ المقال'
                        ])
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@endsection

@section('script')
<script src="{{ asset('vendor/ckeditor/ckeditor.js') }}"></script>
<script>
    CKEDITOR.replace('description', {
        language: 'ar',
        height: 300
    });

    // Form validation
    $('#blogForm').on('submit', function(e) {
        let isValid = true;
        
        // Check required fields
        $('input[required], select[required], textarea[required]').each(function() {
            if (!$(this).val()) {
                isValid = false;
                $(this).addClass('is-invalid');
                if (!$(this).next('.invalid-feedback').length) {
                    $(this).after('<div class="invalid-feedback">هذا الحقل مطلوب</div>');
                }
            } else {
                $(this).removeClass('is-invalid');
                $(this).next('.invalid-feedback').remove();
            }
        });

        if (!isValid) {
            e.preventDefault();
            showNotification('يرجى ملء جميع الحقول المطلوبة', 'error');
        }
    });
</script>
@endsection
```

UPDATE FILE: resources/views/admin/blog/edit.blade.php
```php
@extends('admin.layouts.app')

@section('content')
@include('admin.partials.components.layouts.page-wrapper', [
    'title' => 'تعديل المقال',
    'breadcrumbs' => [
        ['url' => route('admin.dashboard'), 'title' => 'الرئيسية'],
        ['url' => route('admin.blog.list'), 'title' => 'المقالات'],
        ['title' => 'تعديل المقال']
    ]
])

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-edit mr-2"></i>
                        تعديل المقال: {{ $getRecord->title }}
                    </h3>
                    <div class="card-tools">
                        <a href="{{ route('admin.blog.list') }}" class="btn btn-tool" title="العودة للقائمة">
                            <i class="fas fa-arrow-left"></i>
                        </a>
                    </div>
                </div>

                <form action="{{ route('admin.blog.update', $getRecord->id) }}" method="POST" enctype="multipart/form-data" id="blogForm">
                    @csrf
                    @method('PUT')
                    
                    <div class="card-body">
                        <div class="row">
                            <!-- Title -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'title',
                                    'label' => 'عنوان المقال',
                                    'value' => old('title', $getRecord->title),
                                    'placeholder' => 'أدخل عنوان المقال',
                                    'required' => true,
                                    'icon' => 'fas fa-heading'
                                ])
                            </div>

                            <!-- Category -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.select-input', [
                                    'name' => 'blog_category_id',
                                    'label' => 'فئة المقال',
                                    'options' => $getCategory->pluck('name', 'id')->toArray(),
                                    'value' => old('blog_category_id', $getRecord->blog_category_id),
                                    'placeholder' => 'اختر الفئة',
                                    'required' => true,
                                    'icon' => 'fas fa-folder'
                                ])
                            </div>
                        </div>

                        <div class="row">
                            <!-- Slug -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'slug',
                                    'label' => 'الرابط المختصر',
                                    'value' => old('slug', $getRecord->slug),
                                    'placeholder' => 'مثال: my-blog-post',
                                    'required' => true,
                                    'icon' => 'fas fa-link'
                                ])
                            </div>

                            <!-- Status -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.select-input', [
                                    'name' => 'status',
                                    'label' => 'الحالة',
                                    'options' => [
                                        '0' => 'نشط',
                                        '1' => 'غير نشط'
                                    ],
                                    'value' => old('status', $getRecord->status),
                                    'required' => true,
                                    'icon' => 'fas fa-toggle-on'
                                ])
                            </div>
                        </div>

                        <!-- Current Image and New Image -->
                        <div class="row">
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.file-input', [
                                    'name' => 'image_name',
                                    'label' => 'صورة المقال',
                                    'accept' => 'image/*',
                                    'icon' => 'fas fa-image'
                                ])
                            </div>
                            <div class="col-md-6">
                                @if($getRecord->getImage())
                                <div class="form-group">
                                    <label>الصورة الحالية</label>
                                    <div>
                                        <img src="{{ $getRecord->getImage() }}" alt="صورة المقال" 
                                             class="img-thumbnail" style="max-width: 200px; max-height: 150px;">
                                    </div>
                                </div>
                                @endif
                            </div>
                        </div>

                        <!-- Short Description -->
                        <div class="row">
                            <div class="col-12">
                                @include('admin.partials.form-fields.textarea-input', [
                                    'name' => 'short_description',
                                    'label' => 'الوصف المختصر',
                                    'value' => old('short_description', $getRecord->short_description),
                                    'placeholder' => 'أدخل وصفاً مختصراً للمقال',
                                    'rows' => 3,
                                    'required' => true,
                                    'icon' => 'fas fa-align-left'
                                ])
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="row">
                            <div class="col-12">
                                @include('admin.partials.form-fields.textarea-input', [
                                    'name' => 'description',
                                    'label' => 'المحتوى',
                                    'value' => old('description', $getRecord->description),
                                    'placeholder' => 'أدخل محتوى المقال',
                                    'rows' => 8,
                                    'required' => true,
                                    'class' => 'editor',
                                    'icon' => 'fas fa-edit'
                                ])
                            </div>
                        </div>

                        <!-- SEO Fields -->
                        <div class="row">
                            <div class="col-md-4">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'meta_title',
                                    'label' => 'عنوان SEO',
                                    'value' => old('meta_title', $getRecord->meta_title),
                                    'placeholder' => 'عنوان للمحركات البحث',
                                    'required' => true,
                                    'icon' => 'fas fa-search'
                                ])
                            </div>

                            <div class="col-md-4">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'meta_description',
                                    'label' => 'وصف SEO',
                                    'value' => old('meta_description', $getRecord->meta_description),
                                    'placeholder' => 'وصف لمحركات البحث',
                                    'icon' => 'fas fa-search'
                                ])
                            </div>

                            <div class="col-md-4">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'meta_keyword',
                                    'label' => 'الكلمات المفتاحية',
                                    'value' => old('meta_keyword', $getRecord->meta_keyword),
                                    'placeholder' => 'كلمات مفتاحية مفصولة بفواصل',
                                    'icon' => 'fas fa-tags'
                                ])
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="card-footer">
                        @include('admin.partials.form-fields.action-buttons', [
                            'cancelRoute' => route('admin.blog.list'),
                            'submitText' => 'تحديث المقال'
                        ])
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@endsection

@section('script')
<script src="{{ asset('vendor/ckeditor/ckeditor.js') }}"></script>
<script>
    CKEDITOR.replace('description', {
        language: 'ar',
        height: 300
    });

    // Auto-generate slug from title
    $('#title').on('keyup', function() {
        let title = $(this).val();
        let slug = title.toLowerCase()
            .replace(/[^\w\s-]/g, '')
            .replace(/[\s_-]+/g, '-')
            .replace(/^-+|-+$/g, '');
        $('#slug').val(slug);
    });

    // Form validation
    $('#blogForm').on('submit', function(e) {
        let isValid = true;
        
        // Check required fields
        $('input[required], select[required], textarea[required]').each(function() {
            if (!$(this).val()) {
                isValid = false;
                $(this).addClass('is-invalid');
                if (!$(this).next('.invalid-feedback').length) {
                    $(this).after('<div class="invalid-feedback">هذا الحقل مطلوب</div>');
                }
            } else {
                $(this).removeClass('is-invalid');
                $(this).next('.invalid-feedback').remove();
            }
        });

        if (!isValid) {
            e.preventDefault();
            showNotification('يرجى ملء جميع الحقول المطلوبة', 'error');
        }
    });
</script>
@endsection
```

UPDATE FILE: resources/views/admin/blog/list.blade.php
```php
@extends('admin.layouts.app')

@section('content')
@include('admin.partials.components.layouts.page-wrapper', [
    'title' => 'إدارة المقالات',
    'breadcrumbs' => [
        ['url' => route('admin.dashboard'), 'title' => 'الرئيسية'],
        ['title' => 'المقالات']
    ]
])

<div class="container-fluid">
    <!-- Search Form -->
    @include('admin.partials.components.forms.generic-search-form', [
        'route' => route('admin.blog.list'),
        'fields' => [
            [
                'name' => 'title',
                'type' => 'text',
                'label' => 'العنوان',
                'placeholder' => 'البحث بالعنوان',
                'value' => request('title'),
                'col' => 'col-md-3'
            ],
            [
                'name' => 'blog_category_id',
                'type' => 'select',
                'label' => 'الفئة',
                'options' => ['' => 'جميع الفئات'] + $categories->pluck('name', 'id')->toArray(),
                'value' => request('blog_category_id'),
                'col' => 'col-md-3'
            ],
            [
                'name' => 'status',
                'type' => 'select',
                'label' => 'الحالة',
                'options' => [
                    '' => 'جميع الحالات',
                    '0' => 'نشط',
                    '1' => 'غير نشط'
                ],
                'value' => request('status'),
                'col' => 'col-md-2'
            ],
            [
                'name' => 'date_from',
                'type' => 'date',
                'label' => 'من تاريخ',
                'value' => request('date_from'),
                'col' => 'col-md-2'
            ]
        ]
    ])

    <!-- Data Table -->
    @include('admin.partials.components.tables.responsive-data-table', [
        'title' => 'قائمة المقالات',
        'createRoute' => route('admin.blog.create'),
        'createText' => 'إضافة مقال جديد',
        'total' => $getRecord->total(),
        'columns' => [
            ['key' => 'image', 'label' => 'الصورة', 'sortable' => false],
            ['key' => 'title', 'label' => 'العنوان', 'sortable' => true],
            ['key' => 'category', 'label' => 'الفئة', 'sortable' => true],
            ['key' => 'status', 'label' => 'الحالة', 'sortable' => true],
            ['key' => 'created_at', 'label' => 'تاريخ الإنشاء', 'sortable' => true],
            ['key' => 'actions', 'label' => 'الإجراءات', 'sortable' => false]
        ],
        'data' => $getRecord,
        'mobileCardView' => 'admin.blog.partials.mobile-card'
    ])
</div>
@endsection

@section('script')
@include('admin.partials.scripts.generic-table-manager')
@endsection
```

## 2. Create blog mobile card partial:

CREATE FILE: resources/views/admin/blog/partials/mobile-card.blade.php
```php
<div class="mobile-record-card">
    <div class="mobile-card-header">
        <div class="record-image">
            @if($record->getImage())
                <img src="{{ $record->getImage() }}" alt="{{ $record->title }}" class="img-thumbnail">
            @else
                <div class="no-image">
                    <i class="fas fa-image"></i>
                </div>
            @endif
        </div>
        <div class="record-title">
            <h6>{{ $record->title }}</h6>
            <small class="text-muted">{{ $record->category ? $record->category->name : 'غير محدد' }}</small>
        </div>
    </div>
    
    <div class="mobile-card-body">
        <div class="record-info">
            <div class="info-item">
                <span class="info-label">الحالة:</span>
                @include('admin.partials.components.badges.status-badge', [
                    'status' => $record->status == 0 ? 'active' : 'inactive',
                    'text' => $record->status == 0 ? 'نشط' : 'غير نشط'
                ])
            </div>
            <div class="info-item">
                <span class="info-label">تاريخ الإنشاء:</span>
                <span class="info-value">{{ $record->created_at->format('d/m/Y') }}</span>
            </div>
        </div>
        
        <div class="record-actions">
            @include('admin.partials.form-fields.table-action-buttons', [
                'record' => $record,
                'editRoute' => route('admin.blog.edit', $record->id),
                'deleteRoute' => route('admin.blog.delete', $record->id),
                'viewRoute' => null
            ])
        </div>
    </div>
</div>
```

## 3. Update blog category views:

UPDATE FILE: resources/views/admin/blog_category/add.blade.php
```php
@extends('admin.layouts.app')

@section('content')
@include('admin.partials.components.layouts.page-wrapper', [
    'title' => 'إضافة فئة مقال جديدة',
    'breadcrumbs' => [
        ['url' => route('admin.dashboard'), 'title' => 'الرئيسية'],
        ['url' => route('admin.blog_category.list'), 'title' => 'فئات المقالات'],
        ['title' => 'إضافة فئة']
    ]
])

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-plus mr-2"></i>
                        إضافة فئة مقال جديدة
                    </h3>
                    <div class="card-tools">
                        <a href="{{ route('admin.blog_category.list') }}" class="btn btn-tool" title="العودة للقائمة">
                            <i class="fas fa-arrow-left"></i>
                        </a>
                    </div>
                </div>

                <form action="{{ route('admin.blog_category.store') }}" method="POST" id="categoryForm">
                    @csrf
                    <div class="card-body">
                        <div class="row">
                            <!-- Name -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'name',
                                    'label' => 'اسم الفئة',
                                    'value' => old('name'),
                                    'placeholder' => 'أدخل اسم الفئة',
                                    'required' => true,
                                    'icon' => 'fas fa-tag'
                                ])
                            </div>

                            <!-- Status -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.select-input', [
                                    'name' => 'status',
                                    'label' => 'الحالة',
                                    'options' => [
                                        '0' => 'نشط',
                                        '1' => 'غير نشط'
                                    ],
                                    'value' => old('status', '0'),
                                    'required' => true,
                                    'icon' => 'fas fa-toggle-on'
                                ])
                            </div>
                        </div>

                        <!-- SEO Fields -->
                        <div class="row">
                            <div class="col-md-4">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'meta_title',
                                    'label' => 'عنوان SEO',
                                    'value' => old('meta_title'),
                                    'placeholder' => 'عنوان للمحركات البحث',
                                    'icon' => 'fas fa-search'
                                ])
                            </div>

                            <div class="col-md-4">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'meta_description',
                                    'label' => 'وصف SEO',
                                    'value' => old('meta_description'),
                                    'placeholder' => 'وصف لمحركات البحث',
                                    'icon' => 'fas fa-search'
                                ])
                            </div>

                            <div class="col-md-4">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'meta_keyword',
                                    'label' => 'الكلمات المفتاحية',
                                    'value' => old('meta_keyword'),
                                    'placeholder' => 'كلمات مفتاحية مفصولة بفواصل',
                                    'icon' => 'fas fa-tags'
                                ])
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="card-footer">
                        @include('admin.partials.form-fields.action-buttons', [
                            'cancelRoute' => route('admin.blog_category.list'),
                            'submitText' => 'حفظ الفئة'
                        ])
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@endsection

@section('script')
@include('admin.partials.scripts.form-validator')
@endsection
```

UPDATE FILE: resources/views/admin/blog_category/edit.blade.php
```php
@extends('admin.layouts.app')

@section('content')
@include('admin.partials.components.layouts.page-wrapper', [
    'title' => 'تعديل فئة المقال',
    'breadcrumbs' => [
        ['url' => route('admin.dashboard'), 'title' => 'الرئيسية'],
        ['url' => route('admin.blog_category.list'), 'title' => 'فئات المقالات'],
        ['title' => 'تعديل الفئة']
    ]
])

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-edit mr-2"></i>
                        تعديل الفئة: {{ $getRecord->name }}
                    </h3>
                    <div class="card-tools">
                        <a href="{{ route('admin.blog_category.list') }}" class="btn btn-tool" title="العودة للقائمة">
                            <i class="fas fa-arrow-left"></i>
                        </a>
                    </div>
                </div>

                <form action="{{ route('admin.blog_category.update', $getRecord->id) }}" method="POST" id="categoryForm">
                    @csrf
                    @method('PUT')
                    
                    <div class="card-body">
                        <div class="row">
                            <!-- Name -->
                            <div class="col-md-6">
                                @include('admin.partials.form-fields.text-input', [
                                    'name' => 'name',
                                

=== public/assets/js ANALYSIS ===
Looking at the JavaScript files in `public/assets/js/`, I can see several issues that need to be addressed to properly support the admin interface and make it work seamlessly with the Laravel controllers and reusable components. Let me fix these issues:

## Issues Identified:

1. **Incomplete JavaScript files** - Several files are truncated
2. **Missing proper AJAX handlers** for form submissions
3. **Lack of proper error handling** and user feedback
4. **Missing real-time validation** integration
5. **Incomplete table management** functionality
6. **Missing file upload handlers**
7. **No proper localization support** for Arabic interface

Let me fix all these files:

UPDATE FILE: public/assets/js/admin.js

```javascript
/**
 * Admin Dashboard JavaScript Functions
 * Handles common admin interface functionality including table management,
 * form validation, AJAX operations, and UI interactions
 */

class AdminManager {
    constructor() {
        this.init();
        this.currentPage = 1;
        this.itemsPerPage = 10;
        this.searchTimeout = null;
        this.loadingOverlay = null;
    }

    init() {
        this.setupEventListeners();
        this.initializeComponents();
        this.setupCSRFToken();
        this.initializeTableManager();
        this.initializeFormValidation();
        this.createLoadingOverlay();
    }

    setupCSRFToken() {
        // Setup CSRF token for all AJAX requests
        const token = document.querySelector('meta[name="csrf-token"]');
        if (token) {
            $.ajaxSetup({
                headers: {
                    'X-CSRF-TOKEN': token.getAttribute('content')
                }
            });
        }
    }

    createLoadingOverlay() {
        if (!$('.loading-overlay').length) {
            $('body').append(`
                <div class="loading-overlay" style="display: none;">
                    <div class="loading-spinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">جاري التحميل...</span>
                        </div>
                        <div class="loading-text">جاري التحميل...</div>
                    </div>
                </div>
            `);
        }
        this.loadingOverlay = $('.loading-overlay');
    }

    setupEventListeners() {
        // Sidebar toggle
        $(document).on('click', '.sidebar-toggle', function(e) {
            e.preventDefault();
            $('body').toggleClass('sidebar-collapsed');
            localStorage.setItem('sidebar-collapsed', $('body').hasClass('sidebar-collapsed'));
        });

        // Restore sidebar state
        if (localStorage.getItem('sidebar-collapsed') === 'true') {
            $('body').addClass('sidebar-collapsed');
        }

        // Logout confirmation
        $(document).on('click', '.logout-btn', function(e) {
            e.preventDefault();
            const href = $(this).attr('href');
            window.adminManager.confirmAction('تأكيد تسجيل الخروج', 'هل أنت متأكد من تسجيل الخروج؟', () => {
                window.location.href = href;
            });
        });

        // Mobile menu toggle
        $(document).on('click', '.mobile-menu-toggle', function() {
            $('.sidebar').toggleClass('show');
            $('.sidebar-overlay').toggleClass('show');
        });

        // Sidebar overlay click
        $(document).on('click', '.sidebar-overlay', function() {
            $('.sidebar').removeClass('show');
            $(this).removeClass('show');
        });

        // Search functionality with debouncing
        $(document).on('input', '.search-input', (e) => {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                this.performSearch($(e.target).val());
            }, 500);
        });

        // Items per page change
        $(document).on('change', '.items-per-page', (e) => {
            this.itemsPerPage = $(e.target).val();
            this.currentPage = 1;
            this.loadTableData();
        });

        // Status filter change
        $(document).on('change', '.status-filter', () => {
            this.currentPage = 1;
            this.loadTableData();
        });

        // Pagination clicks
        $(document).on('click', '.pagination-link', (e) => {
            e.preventDefault();
            const page = $(e.target).data('page');
            if (page && page !== this.currentPage) {
                this.currentPage = page;
                this.loadTableData();
            }
        });

        // Delete confirmation
        $(document).on('click', '.delete-btn', (e) => {
            e.preventDefault();
            const button = $(e.target).closest('.delete-btn');
            const url = button.attr('href') || button.data('url');
            const itemName = button.data('name') || 'هذا العنصر';
            
            this.confirmDelete(itemName, () => {
                this.performDelete(url);
            });
        });

        // Bulk actions
        $(document).on('change', '.select-all', function() {
            $('.item-checkbox').prop('checked', $(this).is(':checked'));
            window.adminManager.updateBulkActions();
        });

        $(document).on('change', '.item-checkbox', () => {
            this.updateBulkActions();
        });

        $(document).on('click', '.bulk-delete', () => {
            this.performBulkDelete();
        });

        // Form submission with loading state
        $(document).on('submit', '.admin-form', (e) => {
            const $form = $(e.target);
            const $submitBtn = $form.find('button[type="submit"]');
            
            if (!$form.hasClass('skip-validation') && !this.validateForm($form)) {
                e.preventDefault();
                return false;
            }

            this.setButtonLoading($submitBtn, true);
            
            // Auto-restore button state after timeout
            setTimeout(() => {
                this.setButtonLoading($submitBtn, false);
            }, 10000);
        });

        // Status toggle switches
        $(document).on('change', '.status-toggle', (e) => {
            const checkbox = $(e.target);
            const id = checkbox.data('id');
            const url = checkbox.data('url');
            const status = checkbox.is(':checked') ? 1 : 0;
            
            this.toggleStatus(id, url, status, checkbox);
        });

        // File upload preview
        $(document).on('change', 'input[type="file"]', (e) => {
            this.handleFilePreview($(e.target));
        });

        // Image modal
        $(document).on('click', '.image-preview', function() {
            window.adminManager.showImageModal($(this).attr('src'));
        });

        // Form reset
        $(document).on('click', '.reset-form', function() {
            const form = $(this).closest('form')[0];
            if (form) {
                form.reset();
                window.adminManager.clearFormValidation($(form));
            }
        });

        // Auto-save drafts for long forms
        $(document).on('input', '.auto-save textarea, .auto-save input[type="text"]', 
            this.debounce((e) => {
                this.autoSaveDraft($(e.target).closest('form'));
            }, 2000)
        );
    }

    initializeComponents() {
        // Initialize tooltips
        if (typeof $().tooltip === 'function') {
            $('[data-toggle="tooltip"]').tooltip({
                container: 'body',
                placement: 'top'
            });
        }

        // Initialize popovers
        if (typeof $().popover === 'function') {
            $('[data-toggle="popover"]').popover({
                container: 'body',
                html: true
            });
        }

        // Auto-hide alerts
        $('.alert[data-auto-hide]').each(function() {
            const alert = $(this);
            const delay = alert.data('auto-hide') || 5000;
            setTimeout(() => {
                alert.fadeOut();
            }, delay);
        });

        // Initialize select2 if available
        if (typeof $.fn.select2 === 'function') {
            $('.select2').select2({
                dir: 'rtl',
                language: 'ar',
                placeholder: 'اختر...',
                allowClear: true
            });
        }

        // Initialize date pickers
        if (typeof $.fn.datepicker === 'function') {
            $('.datepicker').datepicker({
                format: 'yyyy-mm-dd',
                autoclose: true,
                todayHighlight: true,
                rtl: true,
                language: 'ar'
            });
        }

        // Initialize rich text editors
        this.initializeRichTextEditors();

        // Initialize sortable tables
        this.initializeSortables();
    }

    initializeRichTextEditors() {
        if (typeof $.fn.summernote === 'function') {
            $('.rich-editor').summernote({
                height: 200,
                lang: 'ar-AR',
                direction: 'rtl',
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'underline', 'clear']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video']],
                    ['view', ['fullscreen', 'codeview', 'help']]
                ]
            });
        }
    }

    initializeSortables() {
        if (typeof $.fn.sortable === 'function') {
            $('.sortable-table tbody').sortable({
                handle: '.sort-handle',
                update: (event, ui) => {
                    this.updateSortOrder($(event.target));
                }
            });
        }
    }

    initializeTableManager() {
        this.makeTablesResponsive();
        this.updateBulkActions();
    }

    initializeFormValidation() {
        // Add real-time validation
        $(document).on('blur', '.required', function() {
            window.adminManager.validateField($(this));
        });

        $(document).on('input', '.has-error input, .has-error textarea, .has-error select', function() {
            $(this).closest('.has-error').removeClass('has-error');
            $(this).siblings('.error-message').remove();
        });
    }

    makeTablesResponsive() {
        const checkTableResponsive = () => {
            if ($(window).width() < 768) {
                $('.desktop-table').hide();
                $('.mobile-cards').show();
            } else {
                $('.desktop-table').show();
                $('.mobile-cards').hide();
            }
        };

        checkTableResponsive();
        $(window).resize(checkTableResponsive);
    }

    performSearch(query) {
        this.currentPage = 1;
        this.loadTableData();
    }

    loadTableData() {
        const $container = $('.data-table-container');
        if (!$container.length) return;

        const url = $container.data('url') || window.location.href;
        const searchQuery = $('.search-input').val();
        const statusFilter = $('.status-filter').val();

        this.showTableLoading();

        const params = new URLSearchParams();
        if (searchQuery) params.append('search', searchQuery);
        if (statusFilter) params.append('status', statusFilter);
        params.append('page', this.currentPage);
        params.append('per_page', this.itemsPerPage);

        fetch(`${url}?${params.toString()}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            this.hideTableLoading();
            if (data.success) {
                this.updateTableContent(data.html);
                this.updatePagination(data.pagination);
            } else {
                this.showError(data.message || 'فشل في تحميل البيانات');
            }
        })
        .catch(error => {
            console.error('Error loading table data:', error);
            this.hideTableLoading();
            this.showError('حدث خطأ في تحميل البيانات');
        });
    }

    updateTableContent(html) {
        $('.table-content').html(html);
        this.initializeComponents();
        this.updateBulkActions();
    }

    updatePagination(paginationHtml) {
        $('.pagination-container').html(paginationHtml);
    }

    showTableLoading() {
        $('.table-content').addClass('loading');
        if (!$('.table-loading').length) {
            $('.table-content').append(`
                <div class="table-loading">
                    <div class="text-center p-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">جاري التحميل...</span>
                        </div>
                        <div class="mt-2">جاري تحميل البيانات...</div>
                    </div>
                </div>
            `);
        }
    }

    hideTableLoading() {
        $('.table-content').removeClass('loading');
        $('.table-loading').remove();
    }

    confirmDelete(itemName, callback) {
        this.confirmAction(
            'تأكيد الحذف',
            `هل أنت متأكد من حذف ${itemName}؟ لا يمكن التراجع عن هذا الإجراء.`,
            callback,
            'حذف',
            'danger'
        );
    }

    confirmAction(title, message, callback, confirmText = 'تأكيد', type = 'warning') {
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                title: title,
                text: message,
                icon: type,
                showCancelButton: true,
                confirmButtonColor: type === 'danger' ? '#dc3545' : '#007bff',
                cancelButtonColor: '#6c757d',
                confirmButtonText: confirmText,
                cancelButtonText: 'إلغاء',
                rtl: true
            }).then((result) => {
                if (result.isConfirmed && typeof callback === 'function') {
                    callback();
                }
            });
        } else {
            if (confirm(`${title}\n${message}`)) {
                callback();
            }
        }
    }

    performDelete(url) {
        this.showLoading();

        fetch(url, {
            method: 'DELETE',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content'),
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            this.hideLoading();
            if (data.success) {
                this.showSuccess(data.message || 'تم الحذف بنجاح');
                this.loadTableData();
            } else {
                this.showError(data.message || 'فشل في الحذف');
            }
        })
        .catch(error => {
            console.error('Error deleting item:', error);
            this.hideLoading();
            this.showError('حدث خطأ في الحذف');
        });
    }

    updateBulkActions() {
        const selectedCount = $('.item-checkbox:checked').length;
        const totalCount = $('.item-checkbox').length;
        
        $('.bulk-actions').toggle(selectedCount > 0);
        $('.selected-count').text(selectedCount);
        
        $('.select-all').prop('indeterminate', selectedCount > 0 && selectedCount < totalCount);
        $('.select-all').prop('checked', selectedCount === totalCount && totalCount > 0);
    }

    performBulkDelete() {
        const selectedIds = $('.item-checkbox:checked').map(function() {
            return $(this).val();
        }).get();

        if (selectedIds.length === 0) {
            this.showWarning('يرجى تحديد عناصر للحذف');
            return;
        }

        this.confirmAction(
            'حذف متعدد',
            `هل أنت متأكد من حذف ${selectedIds.length} عنصر؟`,
            () => {
                this.showLoading();

                fetch(window.location.href + '/bulk-delete', {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content'),
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ids: selectedIds })
                })
                .then(response => response.json())
                .then(data => {
                    this.hideLoading();
                    if (data.success) {
                        this.showSuccess(data.message || 'تم الحذف بنجاح');
                        this.loadTableData();
                    } else {
                        this.showError(data.message || 'فشل في الحذف');
                    }
                })
                .catch(error => {
                    console.error('Error in bulk delete:', error);
                    this.hideLoading();
                    this.showError('حدث خطأ في الحذف');
                });
            },
            'حذف الكل',
            'danger'
        );
    }

    toggleStatus(id, url, status, checkbox) {
        const originalState = !status;
        
        fetch(url, {
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content'),
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id: id,
                status: status
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                this.showSuccess(data.message || 'تم تحديث الحالة');
            } else {
                checkbox.prop('checked', originalState);
                this.showError(data.message || 'فشل في تحديث الحالة');
            }
        })
        .catch(error => {
            console.error('Error toggling status:', error);
            checkbox.prop('checked', originalState);
            this.showError('حدث خطأ في تحديث الحالة');
        });
    }

    validateForm(form) {
        if (window.formValidator) {
            return window.formValidator.validateForm(form);
        }
        return true;
    }

    validateField(field) {
        if (window.formValidator) {
            return window.formValidator.validateField(field);
        }
        return true;
    }

    clearFormValidation(form) {
        form.find('.is-invalid').removeClass('is-invalid');
        form.find('.invalid-feedback').remove();
        form.find('.has-error').removeClass('has-error');
    }

    handleFilePreview(input) {
        const file = input[0].files[0];
        const previewContainer = input.siblings('.file-preview');
        
        if (!file) {
            previewContainer.empty();
            return;
        }

        if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
                previewContainer.html(`
                    <img src="${e.target.result}" class="img-thumbnail" style="max-width: 200px; max-height: 200px;">
                `);
            };
            reader.readAsDataURL(file);
        } else {
            previewContainer.html(`
                <div class="file-info">
                    <i class="fas fa-file"></i>
                    <span>${file.name}</span>
                    <small>(${this.formatFileSize(file.size)})</small>
                </div>
            `);
        }
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    showImageModal(src) {
        const modal = $(`
            <div class="modal fade" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">معاينة الصورة</h5>
                            <button type="button" class="close" data-dismiss="modal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body text-center">
                            <img src="${src}" class="img-fluid">
                        </div>
                    </div>
                </div>
            </div>
        `);
        
        modal.modal('show');
        modal.on('hidden.bs.modal', function() {
            modal.remove();
        });
    }

    updateSortOrder(table) {
        const items = table.find('tr').map(function() {
            return $(this).data('id');
        }).get();

        const url = table.data('sort-url');
        if (!url) return;

        fetch(url, {
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content'),
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ items: items })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                this.showSuccess('تم تحديث الترتيب');
            } else {
                this.showError('فشل في تحديث الترتيب');
            }
        })
        .catch(error => {
            console.error('Error updating sort order:', error);
            this.showError('حدث خطأ في تحديث الترتيب');
        });
    }

    autoSaveDraft(form) {
        const formData = new FormData(form[0]);
        const draftKey = 'draft_' + window.location.pathname;
        
        const draftData = {};
        for (let [key, value] of formData.entries()) {
            draftData[key] = value;
        }
        
        localStorage.setItem(draftKey, JSON.stringify(draftData));
        this.showInfo('تم حفظ المسودة تلقائياً', 1000);
    }

    loadDraft(form) {
        const draftKey = 'draft_' + window.location.pathname;
        const draftData = localStorage.getItem(draftKey);
        
        if (draftData) {
            try {
                const data = JSON.parse(draftData);
                Object.keys(data).forEach(key => {
                    const field = form.find(`[name="${key}"]`);
                    if (field.length) {
                        field.val(data[key]);
                    }
                });
                this.showInfo('تم استعادة المسودة');
            } catch (e) {
                console.error('Error loading draft:', e);
            }
        }
    }

    clearDraft() {
        const draftKey = 'draft_' + window.location.pathname;
        localStorage.removeItem(draftKey);
    }

    setButtonLoading(button, loading) {
        if (loading) {
            button.prop('disabled', true).addClass('loading');
            const originalText = button.data('original-text') || button.text();
            button.data('original-text', originalText);
            button.html('<i class="fas fa-spinner fa-spin"></i> جاري الحفظ...');
        } else {
            button.prop('disabled', false).removeClass('loading');
            const originalText = button.data('original-text') || 'حفظ';
            button.html(originalText);
        }
    }

    showLoading() {
        this.loadingOverlay.fadeIn();
    }

    hideLoading() {
        this.loadingOverlay.fadeOut();
    }

    showSuccess(message, duration = 5000) {
        this.showAlert(message, 'success', duration);
    }

    showError(message, duration = 8000) {
        this.showAlert(message, 'danger', duration);
    }

    showWarning(message, duration = 6000) {
        this.showAlert(message, 'warning', duration);
    }

    showInfo(message, duration = 4000) {
        this.showAlert(message, 'info', duration);
    }

    showAlert(message, type, duration) {
        const alertId = 'alert-' + Date.now();
        const alert = $(`
            <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" style="position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                <button type="button" class="close" data-dismiss="alert">
                    <span>&times;</span>
                </button>
                ${message}
            </div>
        `);

        $('body').append(alert);

        if (duration > 0) {
            setTimeout(() => {
                alert.fadeOut(() => alert.remove());
            }, duration);
        }
    }

    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}

// Initialize admin manager when document is ready
$(document).ready(function() {
    window.adminManager = new AdminManager();
});
```

UPDATE FILE: public/assets/js/form-validator.js

```javascript
/**
 * Form Validation Manager
 * Handles client-side form validation with Arabic support
 */

class FormValidator {
    constructor(options = {}) {
        this.options = {
            formSelector: '.admin-form',
            submitButtonSelector: '.submit-btn',
            errorClass: 'is-invalid',
            successClass: 'is-valid',
            errorMessageClass: 'invalid-feedback',
            ...options
        };
        
        this.rules = {};
        this.messages = {};
        this.customValidators = {};
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.initializeValidation();
        this.setupDefaultMessages();
        this.setupCustomValidators();
    }

    setupDefaultMessages() {
        this.messages = {
            required: 'هذا الحقل مطلوب',
            email: 'يرجى إدخال بريد إلكتروني صحيح',
            min: 'يجب أن يكون الحد الأدنى {0} أحرف',
            max: 'يجب أن لا يتجاوز {0} أحرف',
            numeric: 'يرجى إدخال رقم صحيح',
            url: 'يرجى إدخال رابط صحيح',
            phone: 'يرجى إدخال رقم هاتف صحيح',
            unique: 'هذه القيمة مستخدمة مسبقاً',
            match: 'الحقلان غير متطابقان',
            file_size: 'حجم الملف كبير جداً (الحد الأقصى: {0})',
            file_type: 'نوع الملف غير مدعوم',
            min_value: 'القيمة يجب أن تكون أكبر من أو تساوي {0}',
            max_value: 'القيمة يجب أن تكون أقل من أو تساوي {0}',
            date: 'يرجى إدخال تاريخ صحيح',
            time: 'يرجى إدخال وقت صحيح',
            alpha: 'يجب أن يحتوي على أحرف فقط',
            alpha_num: 'يجب أن يحتوي على أحرف وأرقام فقط',
            confirmed: 'تأكيد الحقل غير متطابق'
        };
    }

    setupCustomValidators() {
        this.customValidators = {
            arabic_text: (value) => {
                const arabicRegex = /^[\u0600-\u06FF\s]+$/;
                return arabicRegex.test(value);
            },
            english_text: (value) => {
                const englishRegex = /^[a-zA-Z\s]+$/;
                return englishRegex.test(value);
            },
            slug: (value) => {
                const slugRegex = /^[a-z0-9-_]+$/;
                return slugRegex.test(value);
            },
            saudi_phone: (value) => {
                const saudiPhoneRegex = /^(05|5)[0-9]{8}$/;
                return saudiPhoneRegex.test(value.replace(/\s/g, ''));
            },
            price: (value) => {
                const priceRegex = /^\d+(\.\d{1,2})?$/;
                return priceRegex.test(value);
            }
        };
    }

    setupEventListeners() {
        // Form submission
        $(document).on('submit', this.options.formSelector, (e) => {
            if (!this.validateForm($(e.target))) {
                e.preventDefault();
                return false;
            }
        });

        // Real-time validation
        $(document).on('blur', `${this.options.formSelector} input, ${this.options.formSelector} textarea, ${this.options.formSelector} select`, (e) => {
            this.validateField($(e.target));
        });

        // Clear validation on input
        $(document).on('input', `${this.options.formSelector} input, ${this.options.formSelector} textarea`, (e) => {
            this.clearFieldValidation($(e.target));
        });

        // File input validation
        $(document).on('change', `${this.options.formSelector} input[type="file"]`, (e) => {
            this.validateFileField($(e.target));
        });

        // Password confirmation
        $(document).on('input', 'input[name="password_confirmation"], input[name="password_confirm"]', (e) => {
            const field = $(e.target);
            const passwordField = $('input[name="password"]');
            if (passwordField.length > 0) {
                this.validatePasswordMatch(field, passwordField);
            }
        });

        // Auto-generate slug from title
        $(document).on('input', 'input[name="title"], input[name="name"]', (e) => {
            const slugField = $('input[name="slug

=== public/assets/css ANALYSIS ===
Looking at the CSS files in `public/assets/css/`, I can see they're well-structured but need some improvements for better organization and consistency with the admin panel components. I'll analyze and fix the issues:

## Issues Identified:

1. **CSS organization** - Some styles are duplicated between files
2. **RTL support** - Needs better Arabic RTL support
3. **Responsive design** - Mobile responsiveness can be improved
4. **Component consistency** - Styles should match the reusable components in partials
5. **Performance** - Some redundant CSS rules

## Fixes:

**UPDATE FILE: public/assets/css/admin-design-system.css**

```css
/*
|--------------------------------------------------------------------------
| Enhanced Admin Panel Design System - Arabic RTL with Fixed Layout
|--------------------------------------------------------------------------
| Clean and minimal design system with proper content layout and reusable components
*/

/* ===== MAIN VARIABLES  ===== */
:root {
  /* Brand Colors */
  --primary-color: #3b82f6;
  --primary-hover: #2563eb;
  --primary-light: #dbeafe;
  --secondary-color: #6b7280;
  --secondary-hover: #4b5563;
  --secondary-light: #f3f4f6;
  
  /* Status Colors */
  --success-color: #10b981;
  --success-hover: #059669;
  --success-light: #d1fae5;
  --warning-color: #f59e0b;
  --warning-hover: #d97706;
  --warning-light: #fef3c7;
  --danger-color: #ef4444;
  --danger-hover: #dc2626;
  --danger-light: #fee2e2;
  --info-color: #06b6d4;
  --info-hover: #0891b2;
  --info-light: #cffafe;

  /* Modern Gradients */
  --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  --warning-gradient: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
  --danger-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
  --info-gradient: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
  --dark-gradient: linear-gradient(135deg, #434343 0%, #000000 100%);

  /* Layout */
  --sidebar-width: 280px;
  --sidebar-width-collapsed: 0px;
  --header-height: 60px;
  --content-padding: 1.5rem;

  /* Spacing Scale */
  --space-xs: 0.25rem;
  --space-sm: 0.5rem;
  --space-md: 1rem;
  --space-lg: 1.5rem;
  --space-xl: 2rem;
  --space-2xl: 3rem;

  /* Typography */
  --font-family-primary: 'Tajawal', 'Cairo', Arial, sans-serif;
  --font-family-mono: 'Fira Code', 'Monaco', monospace;
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-md: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  
  /* Font Weights */
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;

  /* Border & Shadow */
  --border-radius-sm: 0.375rem;
  --border-radius: 0.5rem;
  --border-radius-lg: 0.75rem;
  --border-radius-xl: 1rem;
  --border-radius-full: 9999px;
  
  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  
  /* Transitions */
  --transition-fast: 0.15s ease;
  --transition-normal: 0.3s ease;
  --transition-slow: 0.5s ease;
  
  /* Z-Index Scale */
  --z-dropdown: 1000;
  --z-sticky: 1020;
  --z-fixed: 1030;
  --z-modal-backdrop: 1040;
  --z-modal: 1050;
  --z-popover: 1060;
  --z-tooltip: 1070;
}

/* ===== RESET & BASE STYLES ===== */
* {
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  font-family: var(--font-family-primary);
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-normal);
  line-height: 1.5;
  direction: rtl;
  text-align: right;
  background-color: #f8fafc;
  color: #1f2937;
  margin: 0;
  padding: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* ===== LAYOUT SYSTEM ===== */
.admin-layout {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

/* ===== SIDEBAR STYLES ===== */
.main-sidebar {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  width: var(--sidebar-width);
  background: linear-gradient(180deg, #1e293b 0%, #0f172a 100%);
  z-index: var(--z-fixed);
  overflow-y: auto;
  overflow-x: hidden;
  transition: transform var(--transition-normal);
  scrollbar-width: thin;
  scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
}

.main-sidebar::-webkit-scrollbar {
  width: 4px;
}

.main-sidebar::-webkit-scrollbar-track {
  background: transparent;
}

.main-sidebar::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 2px;
}

.main-sidebar::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.3);
}

/* ===== CONTENT WRAPPER ===== */
.content-wrapper {
  margin-right: var(--sidebar-width);
  margin-left: 0;
  margin-top: var(--header-height);
  padding: var(--content-padding);
  background-color: #f8fafc;
  min-height: calc(100vh - var(--header-height));
  transition: margin-right var(--transition-normal);
  width: auto;
}

/* ===== SIDEBAR TOGGLE STATES ===== */
@media (min-width: 992px) {
  body.sidebar-collapse .main-sidebar {
    transform: translateX(100%);
  }

  body.sidebar-collapse .content-wrapper {
    margin-right: 0;
  }

  body.sidebar-collapse .main-footer {
    margin-right: 0;
  }

  body.sidebar-collapse .main-header .navbar {
    padding-right: var(--content-padding);
  }
}

/* ===== MOBILE SIDEBAR ===== */
@media (max-width: 991.98px) {
  .main-sidebar {
    transform: translateX(100%);
    width: 280px;
    box-shadow: var(--shadow-2xl);
  }

  .sidebar-open .main-sidebar {
    transform: translateX(0);
  }

  .content-wrapper {
    margin-right: 0;
    margin-top: var(--header-height);
  }

  .main-header .navbar {
    padding-right: var(--content-padding) !important;
  }

  /* Prevent body scroll when sidebar is open */
  body.sidebar-open {
    overflow: hidden;
  }
}

/* ===== HEADER STYLES ===== */
.main-header {
  background: white !important;
  border-bottom: 1px solid #e2e8f0;
  box-shadow: var(--shadow-sm);
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  z-index: var(--z-sticky);
  height: var(--header-height);
  width: 100%;
}

.main-header .navbar {
  padding: 0 var(--content-padding);
  padding-right: calc(var(--sidebar-width) + var(--content-padding));
  min-height: var(--header-height);
  background: transparent !important;
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  flex-wrap: nowrap;
  transition: padding-right var(--transition-normal);
}

/* ===== NAVBAR COMPONENTS ===== */
.navbar-nav {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  margin: 0;
  list-style: none;
  padding: 0;
}

.navbar-nav .nav-item {
  margin: 0;
  position: relative;
}

.navbar-nav .nav-link {
  color: #64748b !important;
  font-weight: var(--font-weight-medium);
  padding: var(--space-sm) var(--space-md);
  border-radius: var(--border-radius);
  transition: all var(--transition-fast);
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  white-space: nowrap;
  text-decoration: none;
  border: none;
  background: none;
  position: relative;
}

.navbar-nav .nav-link:hover {
  background: var(--secondary-light);
  color: var(--primary-color) !important;
  transform: translateY(-1px);
}

.navbar-nav .nav-link:focus {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

.navbar-nav .nav-link i {
  font-size: 1.1rem;
}

/* ===== PUSHMENU BUTTON ===== */
.navbar-nav .nav-link[data-widget="pushmenu"] {
  background: var(--primary-gradient) !important;
  color: white !important;
  border-radius: var(--border-radius-full);
  width: 40px;
  height: 40px;
  padding: 0;
  display: flex !important;
  align-items: center;
  justify-content: center;
  margin-left: var(--space-sm);
  transition: all var(--transition-normal);
  box-shadow: var(--shadow);
}

.navbar-nav .nav-link[data-widget="pushmenu"]:hover {
  background: linear-gradient(135deg, #5a67d8 0%, #6b5b95 100%) !important;
  transform: translateY(-2px) scale(1.05);
  color: white !important;
  box-shadow: var(--shadow-lg);
}

.navbar-nav .nav-link[data-widget="pushmenu"]:focus {
  outline: 2px solid white;
}

/* ===== DROPDOWN MENUS ===== */
.dropdown-menu {
  border: none;
  box-shadow: var(--shadow-lg);
  border-radius: var(--border-radius-lg);
  padding: var(--space-sm);
  margin-top: var(--space-xs);
  background: white;
  min-width: 200px;
}

.dropdown-item {
  padding: var(--space-sm) var(--space-md);
  border-radius: var(--border-radius);
  margin-bottom: 2px;
  transition: all var(--transition-fast);
  display: flex;
  align-items: center;
  gap: var(--space-sm);
}

.dropdown-item:hover {
  background: var(--primary-light);
  color: var(--primary-color);
}

.dropdown-divider {
  margin: var(--space-sm) 0;
  border-color: var(--secondary-light);
}

/* ===== SIDEBAR COMPONENTS ===== */
.brand-link {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--space-lg);
  background: rgba(0, 0, 0, 0.2);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  color: white;
  text-decoration: none;
  transition: background var(--transition-fast);
}

.brand-link:hover {
  color: white;
  text-decoration: none;
  background: rgba(0, 0, 0, 0.3);
}

.brand-image {
  width: 40px;
  height: 40px;
  border-radius: var(--border-radius-full);
  margin-left: var(--space-sm);
  object-fit: cover;
}

.brand-text {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
}

/* ===== USER PANEL ===== */
.user-panel {
  display: flex;
  align-items: center;
  padding: var(--space-md);
  background: rgba(255, 255, 255, 0.05);
  margin: var(--space-sm) var(--space-md);
  border-radius: var(--border-radius-lg);
  transition: background var(--transition-fast);
}

.user-panel:hover {
  background: rgba(255, 255, 255, 0.08);
}

.user-panel .image {
  margin-left: var(--space-sm);
}

.user-panel img {
  width: 40px;
  height: 40px;
  border-radius: var(--border-radius-full);
  object-fit: cover;
  border: 2px solid rgba(255, 255, 255, 0.2);
}

.user-panel .info a {
  color: white;
  font-weight: var(--font-weight-medium);
  text-decoration: none;
  display: block;
}

.user-panel .info small {
  color: rgba(255, 255, 255, 0.7);
  font-size: var(--font-size-sm);
}

/* ===== SIDEBAR SEARCH ===== */
.sidebar-search {
  padding: 0 var(--space-md);
  margin: var(--space-md) 0;
}

.sidebar-search .form-control-sidebar {
  background: rgba(255, 255, 255, 0.1) !important;
  border: 1px solid rgba(255, 255, 255, 0.2) !important;
  border-radius: var(--border-radius-full) !important;
  color: white !important;
  padding: var(--space-sm) var(--space-md);
  transition: all var(--transition-fast);
}

.sidebar-search .form-control-sidebar:focus {
  background: rgba(255, 255, 255, 0.15) !important;
  border-color: var(--primary-color) !important;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}

.sidebar-search .form-control-sidebar::placeholder {
  color: rgba(255, 255, 255, 0.6) !important;
}

/* ===== NAVIGATION MENU ===== */
.nav-sidebar {
  padding-bottom: var(--space-xl);
}

.nav-header {
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-semibold);
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: rgba(255, 255, 255, 0.6) !important;
  padding: var(--space-md) var(--space-md) var(--space-sm);
  margin-top: var(--space-md);
  position: relative;
}

.nav-header::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: var(--space-md);
  right: var(--space-md);
  height: 1px;
  background: rgba(255, 255, 255, 0.1);
}

.nav-item .nav-link {
  display: flex;
  align-items: center;
  padding: var(--space-sm) var(--space-md);
  margin: 2px var(--space-sm);
  border-radius: var(--border-radius);
  color: rgba(255, 255, 255, 0.8);
  text-decoration: none;
  font-weight: var(--font-weight-normal);
  transition: all var(--transition-fast);
  position: relative;
}

.nav-item .nav-link:hover {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  transform: translateX(-2px);
}

.nav-item .nav-link.active {
  background: var(--primary-color);
  color: white;
  box-shadow: var(--shadow);
}

.nav-item .nav-link.active::before {
  content: '';
  position: absolute;
  right: -8px;
  top: 50%;
  transform: translateY(-50%);
  width: 4px;
  height: 24px;
  background: white;
  border-radius: 2px;
}

.nav-icon {
  margin-left: var(--space-sm);
  font-size: 1.1rem;
  width: 20px;
  text-align: center;
}

.nav-link .right {
  margin-right: auto;
  margin-left: var(--space-sm);
  transition: transform var(--transition-fast);
}

/* ===== TREEVIEW MENU ===== */
.nav-treeview {
  display: none;
  padding-left: 0;
  margin: 0;
  background: rgba(0, 0, 0, 0.1);
  border-radius: 0 0 var(--border-radius) var(--border-radius);
  overflow: hidden;
}

.nav-item.menu-open > .nav-treeview {
  display: block;
  animation: slideDown 0.3s ease;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.nav-item.menu-open > .nav-link .right {
  transform: rotate(90deg);
}

.nav-treeview .nav-item {
  padding: 0;
  margin: 0;
}

.nav-treeview .nav-link {
  padding: var(--space-sm) var(--space-md) var(--space-sm) calc(var(--space-md) * 2.5);
  margin: 0;
  color: rgba(255, 255, 255, 0.7);
  border-radius: 0;
  font-size: var(--font-size-sm);
  position: relative;
}

.nav-treeview .nav-link::before {
  content: '';
  position: absolute;
  right: var(--space-md);
  top: 50%;
  transform: translateY(-50%);
  width: 6px;
  height: 6px;
  border: 1px solid rgba(255, 255, 255, 0.4);
  border-radius: var(--border-radius-full);
}

.nav-treeview .nav-link:hover::before,
.nav-treeview .nav-link.active::before {
  background: white;
  border-color: white;
}

.nav-treeview .nav-link:hover {
  background: rgba(255, 255, 255, 0.05);
  color: white;
  transform: none;
}

.nav-treeview .nav-link.active {
  background: rgba(255, 255, 255, 0.1);
  color: white;
}

/* ===== BADGES ===== */
.badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.25rem 0.5rem;
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-medium);
  line-height: 1;
  border-radius: var(--border-radius-full);
  text-transform: uppercase;
  letter-spacing: 0.025em;
}

.badge-primary {
  background: var(--primary-color);
  color: white;
}

.badge-secondary {
  background: var(--secondary-color);
  color: white;
}

.badge-success {
  background: var(--success-color);
  color: white;
}

.badge-warning {
  background: var(--warning-color);
  color: white;
}

.badge-danger {
  background: var(--danger-color);
  color: white;
}

.badge-info {
  background: var(--info-color);
  color: white;
}

.badge-light {
  background: var(--secondary-light);
  color: var(--secondary-color);
}

.badge-dark {
  background: #374151;
  color: white;
}

/* ===== BUTTONS ===== */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-sm);
  padding: var(--space-sm) var(--space-md);
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-medium);
  line-height: 1.5;
  text-align: center;
  text-decoration: none;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  background-color: transparent;
  border: 1px solid transparent;
  border-radius: var(--border-radius);
  transition: all var(--transition-fast);
  white-space: nowrap;
}

.btn:focus {
  outline: 2px solid;
  outline-offset: 2px;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Button Sizes */
.btn-sm {
  padding: var(--space-xs) var(--space-sm);
  font-size: var(--font-size-sm);
}

.btn-lg {
  padding: var(--space-md) var(--space-lg);
  font-size: var(--font-size-lg);
}

/* Button Variants */
.btn-primary {
  background: var(--primary-color);
  border-color: var(--primary-color);
  color: white;
}

.btn-primary:hover {
  background: var(--primary-hover);
  border-color: var(--primary-hover);
  color: white;
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

.btn-primary:focus {
  outline-color: var(--primary-color);
}

.btn-secondary {
  background: var(--secondary-color);
  border-color: var(--secondary-color);
  color: white;
}

.btn-secondary:hover {
  background: var(--secondary-hover);
  border-color: var(--secondary-hover);
  color: white;
}

.btn-success {
  background: var(--success-color);
  border-color: var(--success-color);
  color: white;
}

.btn-success:hover {
  background: var(--success-hover);
  border-color: var(--success-hover);
  color: white;
}

.btn-warning {
  background: var(--warning-color);
  border-color: var(--warning-color);
  color: white;
}

.btn-warning:hover {
  background: var(--warning-hover);
  border-color: var(--warning-hover);
  color: white;
}

.btn-danger {
  background: var(--danger-color);
  border-color: var(--danger-color);
  color: white;
}

.btn-danger:hover {
  background: var(--danger-hover);
  border-color: var(--danger-hover);
  color: white;
}

.btn-info {
  background: var(--info-color);
  border-color: var(--info-color);
  color: white;
}

.btn-info:hover {
  background: var(--info-hover);
  border-color: var(--info-hover);
  color: white;
}

/* Outline Buttons */
.btn-outline-primary {
  border-color: var(--primary-color);
  color: var(--primary-color);
}

.btn-outline-primary:hover {
  background: var(--primary-color);
  color: white;
}

.btn-outline-secondary {
  border-color: var(--secondary-color);
  color: var(--secondary-color);
}

.btn-outline-secondary:hover {
  background: var(--secondary-color);
  color: white;
}

/* ===== FORMS ===== */
.form-control {
  display: block;
  width: 100%;
  padding: var(--space-sm) var(--space-md);
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-normal);
  line-height: 1.5;
  color: #374151;
  background-color: white;
  background-clip: padding-box;
  border: 1px solid #d1d5db;
  border-radius: var(--border-radius);
  transition: all var(--transition-fast);
}

.form-control:focus {
  color: #374151;
  background-color: white;
  border-color: var(--primary-color);
  outline: 0;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}

.form-control::placeholder {
  color: #9ca3af;
  opacity: 1;
}

.form-control:disabled {
  background-color: #f3f4f6;
  opacity: 1;
}

.form-label {
  display: inline-block;
  margin-bottom: var(--space-sm);
  font-weight: var(--font-weight-medium);
  color: #374151;
}

.form-text {
  margin-top: var(--space-xs);
  font-size: var(--font-size-sm);
  color: #6b7280;
}

/* ===== CARDS ===== */
.card {
  position: relative;
  display: flex;
  flex-direction: column;
  min-width: 0;
  word-wrap: break-word;
  background-color: white;
  background-clip: border-box;
  border: 1px solid #e5e7eb;
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  transition: all var(--transition-fast);
}

.card:hover {
  box-shadow: var(--shadow-md);
  transform: translateY(-1px);
}

.card-header {
  padding: var(--space-md) var(--space-lg);
  margin-bottom: 0;
  background-color: #f9fafb;
  border-bottom: 1px solid #e5e7eb;
  border-radius: var(--border-radius-lg) var(--border-radius-lg) 0 0;
  font-weight: var(--font-weight-medium);
  color: #374151;
}

.card-body {
  flex: 1 1 auto;
  padding: var(--space-lg);
}

.card-footer {
  padding: var(--space-md) var(--space-lg);
  background-color: #f9fafb;
  border-top: 1px solid #e5e7eb;
  border-radius: 0 0 var(--border-radius-lg) var(--border-radius-lg);
}

.card-title {
  margin-bottom: var(--space-md);
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-semibold);
  color: #1f2937;
}

/* ===== TABLES ===== */
.table {
  width: 100%;
  margin-bottom: 0;
  color: #374151;
  vertical-align: top;
  border-color: #e5e7eb;
}

.table > :not(caption) > * > * {
  padding: var(--space-sm) var(--space-md);
  background-color: transparent;
  border-bottom-width: 1px;
  box-shadow: inset 0 0 0 9999px transparent;
}

.table > tbody {
  vertical-align: inherit;
}

.table > thead {
  vertical-align: bottom;
}

.table-striped > tbody > tr:nth-of-type(odd) > td,
.table-striped > tbody > tr:nth-of-type(odd) > th {
  background-color: #f9fafb;
}

.table-hover > tbody > tr:hover > td,
.table-hover > tbody > tr:hover > th {
  background-color: #f3f4f6;
}

.table-responsive {
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  border-radius: var(--border-radius);

=== routes/ ANALYSIS ===
Looking at the routes folder and the project structure, I can see several critical issues that need to be addressed. The main problem is in `routes/web.php` which has routing issues and missing imports. Let me fix these issues:

## Issues Identified:

1. **Missing imports** in `web.php` (Request, Validator classes)
2. **Redundant PHP opening tags** in `web.php`
3. **Missing HomeController routes** (referenced in views but not defined)
4. **Missing PaymentController routes** (referenced in views but not defined)
5. **Missing UserController routes** (referenced in views but not defined)
6. **Missing ProductController routes** (referenced in views but not defined)
7. **Inconsistent route naming** and grouping
8. **Missing API routes** for admin functionality

Let me fix these issues:

**UPDATE FILE: routes/web.php**

```php
<?php

use App\Http\Controllers\Admin\AdminController;
use App\Http\Controllers\Admin\BlogCategoryController;
use App\Http\Controllers\Admin\BlogController;
use App\Http\Controllers\Admin\ProductByCarController;
use App\Http\Controllers\Admin\CarMakesController;
use App\Http\Controllers\Admin\CarModelsController;
use App\Http\Controllers\Admin\ServiceController;
use App\Http\Controllers\Admin\CustomerController;
use App\Http\Controllers\Admin\DashboardController;
use App\Http\Controllers\Admin\DiscountCodeController;
use App\Http\Controllers\Admin\OrderController;
use App\Http\Controllers\Admin\PageController;
use App\Http\Controllers\Admin\PartnerController;
use App\Http\Controllers\Admin\ProductController as AdminProductController;
use App\Http\Controllers\Admin\ShippingChargeController;
use App\Http\Controllers\Admin\SliderController;
use App\Http\Controllers\Admin\SubServiceController;
use App\Http\Controllers\AuthController;
use App\Http\Controllers\HomeController;
use App\Http\Controllers\PaymentController;
use App\Http\Controllers\ProductController;
use App\Http\Controllers\UserController;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Validator;

/*
|--------------------------------------------------------------------------
| Frontend Routes
|--------------------------------------------------------------------------
*/

// Home and General Pages
Route::get('/', [HomeController::class, 'index'])->name('home');
Route::get('/about', [HomeController::class, 'about'])->name('about');
Route::get('/contact', [HomeController::class, 'contact'])->name('contact');
Route::post('/contact', [HomeController::class, 'contactSubmit'])->name('contact.submit');
Route::get('/faq', [HomeController::class, 'faq'])->name('faq');
Route::get('/terms-conditions', [HomeController::class, 'termsConditions'])->name('terms.conditions');
Route::get('/privacy-policy', [HomeController::class, 'privacyPolicy'])->name('privacy.policy');
Route::get('/shipping', [HomeController::class, 'shipping'])->name('shipping');
Route::get('/return-policy', [HomeController::class, 'returnPolicy'])->name('return.policy');
Route::get('/payment-methods', [HomeController::class, 'paymentMethods'])->name('payment.methods');
Route::get('/money-back-guarantee', [HomeController::class, 'moneyBackGuarantee'])->name('money.back.guarantee');

// Authentication Routes
Route::prefix('auth')->name('auth.')->group(function () {
    Route::get('/login', [AuthController::class, 'login'])->name('login');
    Route::post('/login', [AuthController::class, 'authLogin'])->name('authenticate');
    Route::get('/register', [AuthController::class, 'register'])->name('register');
    Route::post('/register', [AuthController::class, 'authRegister'])->name('store');
    Route::get('/logout', [AuthController::class, 'logout'])->name('logout');
    Route::get('/forgot-password', [AuthController::class, 'forgotPassword'])->name('forgot.password');
    Route::post('/forgot-password', [AuthController::class, 'sendReset'])->name('send.reset');
    Route::get('/reset/{token}', [AuthController::class, 'reset'])->name('reset');
    Route::post('/reset/{token}', [AuthController::class, 'authReset'])->name('auth.reset');
});

// Product Routes
Route::prefix('products')->name('product.')->group(function () {
    Route::get('/', [ProductController::class, 'list'])->name('list');
    Route::get('/{slug}', [ProductController::class, 'detail'])->name('detail');
    Route::get('/category/{slug}', [ProductController::class, 'categoryList'])->name('category');
    Route::get('/search', [ProductController::class, 'search'])->name('search');
    Route::post('/wishlist/add', [ProductController::class, 'addToWishlist'])->name('wishlist.add')->middleware('auth');
    Route::post('/wishlist/remove', [ProductController::class, 'removeFromWishlist'])->name('wishlist.remove')->middleware('auth');
});

// Services Routes
Route::prefix('services')->name('service.')->group(function () {
    Route::get('/', [HomeController::class, 'services'])->name('list');
    Route::get('/{slug}', [HomeController::class, 'serviceDetail'])->name('detail');
    Route::get('/{service_slug}/{sub_service_slug}', [HomeController::class, 'subServiceDetail'])->name('sub.detail');
});

// Blog Routes
Route::prefix('blog')->name('blog.')->group(function () {
    Route::get('/', [HomeController::class, 'blogList'])->name('list');
    Route::get('/category/{slug}', [HomeController::class, 'blogCategory'])->name('category');
    Route::get('/{slug}', [HomeController::class, 'blogDetail'])->name('detail');
});

// Cart and Payment Routes
Route::prefix('cart')->name('cart.')->group(function () {
    Route::get('/', [PaymentController::class, 'cart'])->name('view');
    Route::post('/add', [PaymentController::class, 'addToCart'])->name('add');
    Route::post('/update', [PaymentController::class, 'updateCart'])->name('update');
    Route::post('/remove', [PaymentController::class, 'removeFromCart'])->name('remove');
    Route::post('/clear', [PaymentController::class, 'clearCart'])->name('clear');
    Route::post('/apply-discount', [PaymentController::class, 'applyDiscount'])->name('discount.apply');
    Route::post('/remove-discount', [PaymentController::class, 'removeDiscount'])->name('discount.remove');
});

Route::prefix('checkout')->name('checkout.')->middleware('auth')->group(function () {
    Route::get('/', [PaymentController::class, 'checkout'])->name('view');
    Route::post('/process', [PaymentController::class, 'processCheckout'])->name('process');
    Route::get('/success', [PaymentController::class, 'checkoutSuccess'])->name('success');
    Route::get('/cancel', [PaymentController::class, 'checkoutCancel'])->name('cancel');
});

// Payment Routes
Route::prefix('payment')->name('payment.')->middleware('auth')->group(function () {
    Route::post('/stripe', [PaymentController::class, 'stripePayment'])->name('stripe');
    Route::post('/paypal', [PaymentController::class, 'paypalPayment'])->name('paypal');
    Route::get('/paypal/success', [PaymentController::class, 'paypalSuccess'])->name('paypal.success');
    Route::get('/paypal/cancel', [PaymentController::class, 'paypalCancel'])->name('paypal.cancel');
});

// User Dashboard Routes
Route::prefix('user')->name('user.')->middleware('auth')->group(function () {
    Route::get('/dashboard', [UserController::class, 'dashboard'])->name('dashboard');
    Route::get('/profile', [UserController::class, 'profile'])->name('profile');
    Route::put('/profile', [UserController::class, 'updateProfile'])->name('profile.update');
    Route::get('/change-password', [UserController::class, 'changePassword'])->name('change.password');
    Route::put('/change-password', [UserController::class, 'updatePassword'])->name('update.password');
    Route::get('/orders', [UserController::class, 'orders'])->name('orders');
    Route::get('/orders/{id}', [UserController::class, 'orderDetail'])->name('order.detail');
    Route::get('/wishlist', [UserController::class, 'wishlist'])->name('wishlist');
    Route::get('/notifications', [UserController::class, 'notifications'])->name('notifications');
    Route::post('/notifications/mark-read/{id}', [UserController::class, 'markNotificationRead'])->name('notifications.mark-read');
});

/*
|--------------------------------------------------------------------------
| Admin Authentication Routes
|--------------------------------------------------------------------------
*/
Route::prefix('admin')->name('admin.')->group(function () {
    Route::get('/', [AuthController::class, 'login_admin'])->name('login');
    Route::post('/', [AuthController::class, 'auth_login_admin'])->name('authenticate');
    Route::get('logout', [AuthController::class, 'logout_admin'])->name('logout');

    // Admin forgot password
    Route::get('forgot-password', [AuthController::class, 'admin_forgot_password'])->name('forgot.password');
    Route::post('forgot-password', [AuthController::class, 'admin_send_reset'])->name('send.reset');
    Route::get('reset/{token}', [AuthController::class, 'admin_reset'])->name('reset');
    Route::post('reset/{token}', [AuthController::class, 'admin_auth_reset'])->name('auth.reset');
});

/*
|--------------------------------------------------------------------------
| Admin Panel Routes
|--------------------------------------------------------------------------
*/
Route::prefix('admin')->name('admin.')->middleware('isAdmin')->group(function () {

    // Flash message routes for AJAX responses
    Route::post('/set-flash-success', function (Request $request) {
        $request->validate(['message' => 'required|string']);
        session()->flash('success', $request->message);
        return response()->json(['status' => 'ok']);
    })->name('setFlashSuccess');

    Route::post('/set-flash-error', function (Request $request) {
        $request->validate(['message' => 'required|string']);
        session()->flash('error', $request->message);
        return response()->json(['status' => 'ok']);
    })->name('setFlashError');

    Route::post('/set-flash-warning', function (Request $request) {
        $request->validate(['message' => 'required|string']);
        session()->flash('warning', $request->message);
        return response()->json(['status' => 'ok']);
    })->name('setFlashWarning');

    Route::post('/set-flash-info', function (Request $request) {
        $request->validate(['message' => 'required|string']);
        session()->flash('info', $request->message);
        return response()->json(['status' => 'ok']);
    })->name('setFlashInfo');

    Route::post('/set-flash-payment-error', function (Request $request) {
        $request->validate(['message' => 'required|string']);
        session()->flash('payment-error', $request->message);
        return response()->json(['status' => 'ok']);
    })->name('setFlashPaymentError');

    Route::post('/set-flash-primary', function (Request $request) {
        $request->validate(['message' => 'required|string']);
        session()->flash('primary', $request->message);
        return response()->json(['status' => 'ok']);
    })->name('setFlashPrimary');

    Route::post('/set-flash-secondary', function (Request $request) {
        $request->validate(['message' => 'required|string']);
        session()->flash('secondary', $request->message);
        return response()->json(['status' => 'ok']);
    })->name('setFlashSecondary');

    Route::post('/set-validation-errors', function (Request $request) {
        $validator = Validator::make($request->all(), [
            'errors' => 'required|array',
            'errors.*' => 'required|string'
        ]);

        if ($validator->fails()) {
            return response()->json(['status' => 'error', 'message' => 'Invalid data'], 400);
        }

        $errors = $request->errors;
        session()->flash('validation_errors', $errors);
        return response()->json(['status' => 'ok']);
    })->name('setValidationErrors');

    // Dashboard
    Route::get('dashboard', [DashboardController::class, 'dashboard'])->name('dashboard');

    // Analytics & Reports
    Route::get('analytics', [DashboardController::class, 'analytics'])->name('analytics');
    Route::get('reports', [DashboardController::class, 'reports'])->name('reports');

    // Notifications
    Route::get('notification', [PageController::class, 'notification'])->name('notifications');
    Route::post('notifications/mark-read/{id}', [PageController::class, 'markAsRead'])->name('notifications.mark-read');
    Route::post('notifications/mark-all-read', [PageController::class, 'markAllAsRead'])->name('notifications.mark-all-read');

    /*
    |--------------------------------------------------------------------------
    | User Management
    |--------------------------------------------------------------------------
    */
    // Administrators
    Route::prefix('administrators')->name('administrators.')->group(function () {
        Route::get('/', [AdminController::class, 'list'])->name('list');
        Route::get('create', [AdminController::class, 'add'])->name('create');
        Route::post('store', [AdminController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [AdminController::class, 'edit'])->name('edit');
        Route::put('{id}', [AdminController::class, 'update'])->name('update');
        Route::post('delete/{id}', [AdminController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [AdminController::class, 'toggleStatus'])->name('toggle-status');
    });

    // Customers
    Route::prefix('customers')->name('customers.')->group(function () {
        Route::get('/', [CustomerController::class, 'customerList'])->name('list');
        Route::get('create', [CustomerController::class, 'customerAdd'])->name('create');
        Route::post('store', [CustomerController::class, 'customerInsert'])->name('store');
        Route::get('{id}/edit', [CustomerController::class, 'customerEdit'])->name('edit');
        Route::put('{id}', [CustomerController::class, 'customerUpdate'])->name('update');
        Route::post('delete/{id}', [CustomerController::class, 'customerDelete'])->name('delete');
        Route::patch('{id}/toggle-status', [CustomerController::class, 'toggleStatus'])->name('toggle-status');
        Route::get('export', [CustomerController::class, 'export'])->name('export');
    });

    /*
    |--------------------------------------------------------------------------
    | E-commerce Management
    |--------------------------------------------------------------------------
    */
    // Orders
    Route::prefix('orders')->name('orders.')->group(function () {
        Route::get('/', [OrderController::class, 'list'])->name('list');
        Route::get('{id}', [OrderController::class, 'orderDetail'])->name('detail');
        Route::get('{id}/debug', [OrderController::class, 'debugOrder'])->name('debug');
        Route::patch('{id}/status', [OrderController::class, 'updateStatus'])->name('update-status');
        Route::get('{id}/invoice', [OrderController::class, 'generateInvoice'])->name('invoice');
        Route::get('export', [OrderController::class, 'export'])->name('export');
        Route::get('statistics', [OrderController::class, 'statistics'])->name('statistics');
    });

    // Products
    Route::prefix('products')->name('products.')->group(function () {
        Route::get('/', [AdminProductController::class, 'list'])->name('list');
        Route::get('create', [AdminProductController::class, 'add'])->name('create');
        Route::post('store', [AdminProductController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [AdminProductController::class, 'edit'])->name('edit');
        Route::put('{id}', [AdminProductController::class, 'update'])->name('update');
        Route::post('delete/{id}', [AdminProductController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [AdminProductController::class, 'toggleStatus'])->name('toggle-status');
        Route::get('export', [AdminProductController::class, 'export'])->name('export');
    });

    // Product by Car
    Route::prefix('product-by-car')->name('product-by-car.')->group(function () {
        Route::get('/', [ProductByCarController::class, 'list'])->name('list');
        Route::get('create', [ProductByCarController::class, 'add'])->name('create');
        Route::post('store', [ProductByCarController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [ProductByCarController::class, 'edit'])->name('edit');
        Route::put('{id}', [ProductByCarController::class, 'update'])->name('update');
        Route::post('delete/{id}', [ProductByCarController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [ProductByCarController::class, 'toggleStatus'])->name('toggle-status');
        Route::get('get-models/{make_id}', [ProductByCarController::class, 'getModels'])->name('get-models');
    });

    // Discount Codes
    Route::prefix('discount-codes')->name('discount-codes.')->group(function () {
        Route::get('/', [DiscountCodeController::class, 'list'])->name('list');
        Route::get('create', [DiscountCodeController::class, 'add'])->name('create');
        Route::post('store', [DiscountCodeController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [DiscountCodeController::class, 'edit'])->name('edit');
        Route::put('{id}', [DiscountCodeController::class, 'update'])->name('update');
        Route::post('delete/{id}', [DiscountCodeController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [DiscountCodeController::class, 'toggleStatus'])->name('toggle-status');
        Route::post('validate', [DiscountCodeController::class, 'validateCode'])->name('validate');
        Route::get('export', [DiscountCodeController::class, 'export'])->name('export');
    });

    /*
    |--------------------------------------------------------------------------
    | Content Management
    |--------------------------------------------------------------------------
    */
    // Car Makes
    Route::prefix('car_make')->name('car_make.')->group(function () {
        Route::get('/', [CarMakesController::class, 'list'])->name('list');
        Route::get('create', [CarMakesController::class, 'add'])->name('create');
        Route::post('store', [CarMakesController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [CarMakesController::class, 'edit'])->name('edit');
        Route::put('{id}', [CarMakesController::class, 'update'])->name('update');
        Route::post('delete/{id}', [CarMakesController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [CarMakesController::class, 'toggleStatus'])->name('toggle-status');
        Route::patch('{id}/toggle-popularity', [CarMakesController::class, 'togglePopularity'])->name('toggle-popularity');
    });

    // Car Models
    Route::prefix('car-models')->name('car-models.')->group(function () {
        Route::get('/', [CarModelsController::class, 'list'])->name('list');
        Route::get('create', [CarModelsController::class, 'add'])->name('create');
        Route::post('store', [CarModelsController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [CarModelsController::class, 'edit'])->name('edit');
        Route::put('{id}', [CarModelsController::class, 'update'])->name('update');
        Route::post('delete/{id}', [CarModelsController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [CarModelsController::class, 'toggleStatus'])->name('toggle-status');
        Route::get('get-by-make/{make_id}', [CarModelsController::class, 'getByMake'])->name('get-by-make');
    });

    // Services
    Route::prefix('services')->name('services.')->group(function () {
        Route::get('/', [ServiceController::class, 'list'])->name('list');
        Route::get('create', [ServiceController::class, 'add'])->name('create');
        Route::post('store', [ServiceController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [ServiceController::class, 'edit'])->name('edit');
        Route::put('{id}', [ServiceController::class, 'update'])->name('update');
        Route::post('delete/{id}', [ServiceController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [ServiceController::class, 'toggleStatus'])->name('toggle-status');
    });

    // Sub Services
    Route::prefix('sub-services')->name('sub-services.')->group(function () {
        Route::get('/', [SubServiceController::class, 'list'])->name('list');
        Route::get('create', [SubServiceController::class, 'add'])->name('create');
        Route::post('store', [SubServiceController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [SubServiceController::class, 'edit'])->name('edit');
        Route::put('{id}', [SubServiceController::class, 'update'])->name('update');
        Route::post('delete/{id}', [SubServiceController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [SubServiceController::class, 'toggleStatus'])->name('toggle-status');
        Route::get('get-by-service/{service_id}', [SubServiceController::class, 'getByService'])->name('get-by-service');
    });

    // Blog Categories
    Route::prefix('blog-categories')->name('blog-categories.')->group(function () {
        Route::get('/', [BlogCategoryController::class, 'list'])->name('list');
        Route::get('create', [BlogCategoryController::class, 'add'])->name('create');
        Route::post('store', [BlogCategoryController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [BlogCategoryController::class, 'edit'])->name('edit');
        Route::put('{id}', [BlogCategoryController::class, 'update'])->name('update');
        Route::post('delete/{id}', [BlogCategoryController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [BlogCategoryController::class, 'toggleStatus'])->name('toggle-status');
    });

    // Blog Posts
    Route::prefix('blogs')->name('blogs.')->group(function () {
        Route::get('/', [BlogController::class, 'list'])->name('list');
        Route::get('create', [BlogController::class, 'add'])->name('create');
        Route::post('store', [BlogController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [BlogController::class, 'edit'])->name('edit');
        Route::put('{id}', [BlogController::class, 'update'])->name('update');
        Route::post('delete/{id}', [BlogController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [BlogController::class, 'toggleStatus'])->name('toggle-status');
    });

    // Partners
    Route::prefix('partners')->name('partners.')->group(function () {
        Route::get('/', [PartnerController::class, 'list'])->name('list');
        Route::get('create', [PartnerController::class, 'add'])->name('create');
        Route::post('store', [PartnerController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [PartnerController::class, 'edit'])->name('edit');
        Route::put('{id}', [PartnerController::class, 'update'])->name('update');
        Route::post('delete/{id}', [PartnerController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [PartnerController::class, 'toggleStatus'])->name('toggle-status');
    });

    // Sliders
    Route::prefix('sliders')->name('sliders.')->group(function () {
        Route::get('/', [SliderController::class, 'list'])->name('list');
        Route::get('create', [SliderController::class, 'add'])->name('create');
        Route::post('store', [SliderController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [SliderController::class, 'edit'])->name('edit');
        Route::put('{id}', [SliderController::class, 'update'])->name('update');
        Route::post('delete/{id}', [SliderController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [SliderController::class, 'toggleStatus'])->name('toggle-status');
        Route::patch('{id}/update-order', [SliderController::class, 'updateOrder'])->name('update-order');
    });

    // Shipping Charges
    Route::prefix('shipping-charges')->name('shipping-charges.')->group(function () {
        Route::get('/', [ShippingChargeController::class, 'list'])->name('list');
        Route::get('create', [ShippingChargeController::class, 'add'])->name('create');
        Route::post('store', [ShippingChargeController::class, 'insert'])->name('store');
        Route::get('{id}/edit', [ShippingChargeController::class, 'edit'])->name('edit');
        Route::put('{id}', [ShippingChargeController::class, 'update'])->name('update');
        Route::post('delete/{id}', [ShippingChargeController::class, 'delete'])->name('delete');
        Route::patch('{id}/toggle-status', [ShippingChargeController::class, 'toggleStatus'])->name('toggle-status');
    });

    /*
    |--------------------------------------------------------------------------
    | Settings & Configuration
    |--------------------------------------------------------------------------
    */
    // Pages Management
    Route::prefix('pages')->name('pages.')->group(function () {
        Route::get('/', [PageController::class, 'list'])->name('list');
        Route::get('{id}/edit', [PageController::class, 'edit'])->name('edit');
        Route::put('{id}', [PageController::class, 'update'])->name('update');
    });

    // System Settings
    Route::prefix('settings')->name('settings.')->group(function () {
        Route::get('system', [PageController::class, 'systemSettings'])->name('system');
        Route::put('system', [PageController::class, 'updateSystemSettings'])->name('system.update');
        Route::get('home', [PageController::class, 'homeSettings'])->name('home');
        Route::put('home', [PageController::class, 'updateHomeSettings'])->name('home.update');
        Route::get('smtp', [PageController::class, 'smtpSettings'])->name('smtp');
        Route::put('smtp', [PageController::class, 'updateSmtpSettings'])->name('smtp.update');
    });

    // Contact Us Messages
    Route::prefix('contact-messages')->name('contact-messages.')->group(function () {
        Route::get('/', [PageController::class, 'contactMessages'])->name('list');
        Route::get('{id}', [PageController::class, 'contactMessageDetail'])->name('detail');
        Route::patch('{id}/mark-read', [PageController::class, 'markContactMessageRead'])->name('mark-read');
        Route::post('delete/{id}', [PageController::class, 'deleteContactMessage'])->name('delete');
    });

    /*
    |--------------------------------------------------------------------------
    | API Routes for Admin
    |--------------------------------------------------------------------------
    */
    Route::prefix('api')->name('api.')->group(function () {
        Route::get('dashboard-stats', [DashboardController::class, 'getDashboardStats'])->name('dashboard.stats');
        Route::get('recent-orders', [DashboardController::class, 'getRecentOrders'])->name('recent.orders');
        Route::get('sales-chart', [DashboardController::class, 'getSalesChart'])->name('sales.chart');
        Route::get('top-products', [DashboardController::class, 'getTopProducts'])->name('top.products');
        Route::get('car-models/{make_id}', [CarModelsController::class, 'getByMake'])->name('car.models');
        Route::get('sub-services/{service_id}', [SubServiceController::class, 'getByService'])->name('sub.services');
    });
});
```

**UPDATE FILE: routes/api.php**

```php
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Admin\DashboardController;
use App\Http\Controllers\Admin\CarModelsController;
use App\Http\Controllers\Admin\SubServiceController;
use App\Http\Controllers\Admin\DiscountCodeController;
use App\Http\Controllers\ProductController;
use App\Http\Controllers\PaymentController;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

/*
|--------------------------------------------------------------------------
| Public API Routes
|--------------------------------------------------------------------------
*/
Route::prefix('v1')->group(function () {
    // Product API
    Route::prefix('products')->group(function () {
        Route::get('/', [ProductController::class, 'apiList']);
        Route::get('/{id}', [ProductController::class, 'apiDetail']);
        Route::get('/search', [ProductController::class, 'apiSearch']);
        Route::get('/category/{category_id}', [ProductController::class, 'apiByCategory']);
    });

    // Car Makes and Models API
    Route::prefix('cars')->group(function () {
        Route::get('/makes', [CarModelsController::class, 'apiGetMakes']);
        Route::get('/models/{make_id}', [CarModelsController::class, 'apiGetModels']);
    });

    // Discount Code Validation
    Route::post('/discount/validate', [DiscountCodeController::class, 'apiValidateCode']);

    // Shipping Calculation
    Route::post('/shipping/calculate', [PaymentController::class, 'apiCalculate

=== database/migrations ANALYSIS ===
Looking at the database migrations folder, I can see that this Laravel project is using only the default Laravel 11 migrations, but based on the controllers and views, this is clearly an automotive e-commerce platform that needs many additional database tables. The current migrations are insufficient for the application's functionality.

Let me analyze what's needed based on the controllers and create the missing migrations:

## Issues Identified:

1. **Missing Core Business Tables**: No migrations for products, orders, car makes/models, services, etc.
2. **Incomplete User System**: Default users table lacks fields needed for the application
3. **Missing Admin System**: No admin users table or role-based access
4. **Missing E-commerce Tables**: No cart, orders, payments, shipping tables
5. **Missing Content Management**: No tables for blogs, pages, sliders, etc.

## Required Migrations:

CREATE FILE: database/migrations/2024_01_01_000003_create_admins_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('admins', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('phone')->nullable();
            $table->string('image')->nullable();
            $table->enum('role', ['admin', 'super_admin'])->default('admin');
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->rememberToken();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('admins');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000004_update_users_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->string('phone')->nullable()->after('email');
            $table->text('address')->nullable()->after('phone');
            $table->string('city')->nullable()->after('address');
            $table->string('state')->nullable()->after('city');
            $table->string('country')->nullable()->after('state');
            $table->string('postal_code')->nullable()->after('country');
            $table->date('date_of_birth')->nullable()->after('postal_code');
            $table->enum('gender', ['male', 'female', 'other'])->nullable()->after('date_of_birth');
            $table->string('profile_image')->nullable()->after('gender');
            $table->enum('status', ['active', 'inactive', 'suspended'])->default('active')->after('profile_image');
            $table->timestamp('last_login_at')->nullable()->after('status');
            $table->string('reset_token')->nullable()->after('last_login_at');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn([
                'phone', 'address', 'city', 'state', 'country', 'postal_code',
                'date_of_birth', 'gender', 'profile_image', 'status', 
                'last_login_at', 'reset_token'
            ]);
        });
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000005_create_car_makes_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('car_makes', function (Blueprint $table) {
            $table->id();
            $table->string('name_en');
            $table->string('name_ar')->nullable();
            $table->string('slug')->unique();
            $table->text('description_en')->nullable();
            $table->text('description_ar')->nullable();
            $table->string('image')->nullable();
            $table->string('logo')->nullable();
            $table->enum('popularity', ['low', 'medium', 'high'])->default('medium');
            $table->integer('sort_order')->default(0);
            $table->boolean('is_featured')->default(false);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->json('meta_data')->nullable();
            $table->timestamps();
            
            $table->index(['status', 'popularity']);
            $table->index('sort_order');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('car_makes');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000006_create_car_models_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('car_models', function (Blueprint $table) {
            $table->id();
            $table->foreignId('car_make_id')->constrained()->onDelete('cascade');
            $table->string('name_en');
            $table->string('name_ar')->nullable();
            $table->string('slug')->unique();
            $table->text('description_en')->nullable();
            $table->text('description_ar')->nullable();
            $table->string('image')->nullable();
            $table->year('year_from')->nullable();
            $table->year('year_to')->nullable();
            $table->string('engine_type')->nullable();
            $table->string('fuel_type')->nullable();
            $table->string('transmission')->nullable();
            $table->integer('sort_order')->default(0);
            $table->boolean('is_featured')->default(false);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->json('specifications')->nullable();
            $table->timestamps();
            
            $table->index(['car_make_id', 'status']);
            $table->index(['year_from', 'year_to']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('car_models');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000007_create_categories_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('name_en');
            $table->string('name_ar')->nullable();
            $table->string('slug')->unique();
            $table->text('description_en')->nullable();
            $table->text('description_ar')->nullable();
            $table->string('image')->nullable();
            $table->string('icon')->nullable();
            $table->foreignId('parent_id')->nullable()->constrained('categories')->onDelete('cascade');
            $table->integer('sort_order')->default(0);
            $table->boolean('is_featured')->default(false);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->string('meta_title')->nullable();
            $table->text('meta_description')->nullable();
            $table->timestamps();
            
            $table->index(['parent_id', 'status']);
            $table->index('sort_order');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('categories');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000008_create_products_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('products', function (Blueprint $table) {
            $table->id();
            $table->string('title_en');
            $table->string('title_ar')->nullable();
            $table->string('slug')->unique();
            $table->text('description_en')->nullable();
            $table->text('description_ar')->nullable();
            $table->text('short_description_en')->nullable();
            $table->text('short_description_ar')->nullable();
            $table->string('sku')->unique();
            $table->decimal('price', 10, 2);
            $table->decimal('old_price', 10, 2)->nullable();
            $table->integer('quantity')->default(0);
            $table->integer('min_quantity')->default(1);
            $table->string('image')->nullable();
            $table->json('gallery')->nullable();
            $table->foreignId('category_id')->nullable()->constrained()->onDelete('set null');
            $table->decimal('weight', 8, 2)->nullable();
            $table->string('dimensions')->nullable();
            $table->string('color')->nullable();
            $table->string('material')->nullable();
            $table->string('brand')->nullable();
            $table->boolean('is_featured')->default(false);
            $table->boolean('is_trending')->default(false);
            $table->boolean('is_new_arrival')->default(false);
            $table->enum('status', ['active', 'inactive', 'out_of_stock'])->default('active');
            $table->string('meta_title')->nullable();
            $table->text('meta_description')->nullable();
            $table->json('tags')->nullable();
            $table->integer('views_count')->default(0);
            $table->decimal('rating', 3, 2)->default(0);
            $table->integer('reviews_count')->default(0);
            $table->timestamps();
            
            $table->index(['category_id', 'status']);
            $table->index(['is_featured', 'status']);
            $table->index(['price', 'status']);
            $table->fullText(['title_en', 'description_en']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('products');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000009_create_product_by_cars_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('product_by_cars', function (Blueprint $table) {
            $table->id();
            $table->foreignId('product_id')->constrained()->onDelete('cascade');
            $table->foreignId('car_make_id')->constrained()->onDelete('cascade');
            $table->foreignId('car_model_id')->nullable()->constrained()->onDelete('cascade');
            $table->year('year_from')->nullable();
            $table->year('year_to')->nullable();
            $table->string('engine_type')->nullable();
            $table->text('compatibility_notes')->nullable();
            $table->decimal('specific_price', 10, 2)->nullable();
            $table->string('part_number')->nullable();
            $table->enum('fit_type', ['direct', 'universal', 'custom'])->default('direct');
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamps();
            
            $table->unique(['product_id', 'car_make_id', 'car_model_id'], 'product_car_unique');
            $table->index(['car_make_id', 'car_model_id']);
            $table->index(['year_from', 'year_to']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('product_by_cars');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000010_create_services_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('services', function (Blueprint $table) {
            $table->id();
            $table->string('title_en');
            $table->string('title_ar')->nullable();
            $table->string('slug')->unique();
            $table->text('description_en')->nullable();
            $table->text('description_ar')->nullable();
            $table->text('short_description_en')->nullable();
            $table->text('short_description_ar')->nullable();
            $table->string('image')->nullable();
            $table->json('gallery')->nullable();
            $table->decimal('price', 10, 2)->nullable();
            $table->decimal('discount_price', 10, 2)->nullable();
            $table->string('duration')->nullable();
            $table->string('icon')->nullable();
            $table->integer('sort_order')->default(0);
            $table->boolean('is_featured')->default(false);
            $table->boolean('is_popular')->default(false);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->string('meta_title')->nullable();
            $table->text('meta_description')->nullable();
            $table->json('features')->nullable();
            $table->json('requirements')->nullable();
            $table->timestamps();
            
            $table->index(['status', 'is_featured']);
            $table->index('sort_order');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('services');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000011_create_sub_services_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('sub_services', function (Blueprint $table) {
            $table->id();
            $table->foreignId('service_id')->constrained()->onDelete('cascade');
            $table->string('title_en');
            $table->string('title_ar')->nullable();
            $table->string('slug')->unique();
            $table->text('description_en')->nullable();
            $table->text('description_ar')->nullable();
            $table->text('short_description_en')->nullable();
            $table->text('short_description_ar')->nullable();
            $table->string('image')->nullable();
            $table->json('gallery')->nullable();
            $table->decimal('price', 10, 2);
            $table->decimal('discount_price', 10, 2)->nullable();
            $table->string('duration')->nullable();
            $table->string('icon')->nullable();
            $table->integer('sort_order')->default(0);
            $table->boolean('is_featured')->default(false);
            $table->boolean('is_popular')->default(false);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->string('meta_title')->nullable();
            $table->text('meta_description')->nullable();
            $table->json('features')->nullable();
            $table->json('requirements')->nullable();
            $table->json('process_steps')->nullable();
            $table->timestamps();
            
            $table->index(['service_id', 'status']);
            $table->index(['is_featured', 'status']);
            $table->index('sort_order');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('sub_services');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000012_create_orders_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('orders', function (Blueprint $table) {
            $table->id();
            $table->string('order_number')->unique();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->enum('status', ['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded'])->default('pending');
            $table->decimal('subtotal', 10, 2);
            $table->decimal('tax_amount', 10, 2)->default(0);
            $table->decimal('shipping_amount', 10, 2)->default(0);
            $table->decimal('discount_amount', 10, 2)->default(0);
            $table->decimal('total_amount', 10, 2);
            $table->string('currency', 3)->default('USD');
            $table->enum('payment_status', ['pending', 'paid', 'failed', 'refunded', 'partially_refunded'])->default('pending');
            $table->string('payment_method')->nullable();
            $table->string('payment_reference')->nullable();
            $table->json('billing_address');
            $table->json('shipping_address');
            $table->string('discount_code')->nullable();
            $table->text('notes')->nullable();
            $table->timestamp('shipped_at')->nullable();
            $table->timestamp('delivered_at')->nullable();
            $table->string('tracking_number')->nullable();
            $table->string('shipping_carrier')->nullable();
            $table->timestamps();
            
            $table->index(['user_id', 'status']);
            $table->index(['status', 'created_at']);
            $table->index('payment_status');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('orders');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000013_create_order_items_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('order_items', function (Blueprint $table) {
            $table->id();
            $table->foreignId('order_id')->constrained()->onDelete('cascade');
            $table->foreignId('product_id')->constrained()->onDelete('cascade');
            $table->string('product_title');
            $table->string('product_sku');
            $table->string('product_image')->nullable();
            $table->integer('quantity');
            $table->decimal('unit_price', 10, 2);
            $table->decimal('total_price', 10, 2);
            $table->json('product_options')->nullable();
            $table->timestamps();
            
            $table->index(['order_id', 'product_id']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('order_items');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000014_create_shopping_cart_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('shopping_cart', function (Blueprint $table) {
            $table->id();
            $table->string('session_id')->nullable();
            $table->foreignId('user_id')->nullable()->constrained()->onDelete('cascade');
            $table->foreignId('product_id')->constrained()->onDelete('cascade');
            $table->integer('quantity');
            $table->decimal('price', 10, 2);
            $table->json('options')->nullable();
            $table->timestamps();
            
            $table->index(['user_id', 'product_id']);
            $table->index(['session_id', 'product_id']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('shopping_cart');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000015_create_wishlists_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('wishlists', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('product_id')->constrained()->onDelete('cascade');
            $table->timestamps();
            
            $table->unique(['user_id', 'product_id']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('wishlists');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000016_create_discount_codes_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('discount_codes', function (Blueprint $table) {
            $table->id();
            $table->string('code')->unique();
            $table->string('name');
            $table->text('description')->nullable();
            $table->enum('type', ['percentage', 'fixed_amount'])->default('percentage');
            $table->decimal('value', 10, 2);
            $table->decimal('minimum_amount', 10, 2)->nullable();
            $table->decimal('maximum_discount', 10, 2)->nullable();
            $table->integer('usage_limit')->nullable();
            $table->integer('used_count')->default(0);
            $table->integer('usage_limit_per_user')->nullable();
            $table->datetime('starts_at')->nullable();
            $table->datetime('expires_at')->nullable();
            $table->boolean('is_active')->default(true);
            $table->json('applicable_products')->nullable();
            $table->json('applicable_categories')->nullable();
            $table->json('excluded_products')->nullable();
            $table->boolean('first_order_only')->default(false);
            $table->timestamps();
            
            $table->index(['code', 'is_active']);
            $table->index(['starts_at', 'expires_at']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('discount_codes');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000017_create_shipping_charges_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('shipping_charges', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->text('description')->nullable();
            $table->string('country')->nullable();
            $table->string('state')->nullable();
            $table->string('city')->nullable();
            $table->string('postal_code')->nullable();
            $table->decimal('charge', 10, 2);
            $table->decimal('free_shipping_threshold', 10, 2)->nullable();
            $table->decimal('weight_from', 8, 2)->nullable();
            $table->decimal('weight_to', 8, 2)->nullable();
            $table->string('shipping_method')->nullable();
            $table->string('estimated_delivery')->nullable();
            $table->boolean('is_default')->default(false);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamps();
            
            $table->index(['country', 'state', 'city']);
            $table->index(['weight_from', 'weight_to']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('shipping_charges');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000018_create_blog_categories_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('blog_categories', function (Blueprint $table) {
            $table->id();
            $table->string('name_en');
            $table->string('name_ar')->nullable();
            $table->string('slug')->unique();
            $table->text('description_en')->nullable();
            $table->text('description_ar')->nullable();
            $table->string('image')->nullable();
            $table->string('color')->nullable();
            $table->integer('sort_order')->default(0);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->string('meta_title')->nullable();
            $table->text('meta_description')->nullable();
            $table->timestamps();
            
            $table->index(['status', 'sort_order']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('blog_categories');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000019_create_blogs_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('blogs', function (Blueprint $table) {
            $table->id();
            $table->string('title_en');
            $table->string('title_ar')->nullable();
            $table->string('slug')->unique();
            $table->text('excerpt_en')->nullable();
            $table->text('excerpt_ar')->nullable();
            $table->longText('content_en');
            $table->longText('content_ar')->nullable();
            $table->string('featured_image')->nullable();
            $table->json('gallery')->nullable();
            $table->foreignId('blog_category_id')->nullable()->constrained()->onDelete('set null');
            $table->foreignId('author_id')->constrained('admins')->onDelete('cascade');
            $table->boolean('is_featured')->default(false);
            $table->boolean('is_published')->default(false);
            $table->datetime('published_at')->nullable();
            $table->integer('views_count')->default(0);
            $table->integer('reading_time')->nullable();
            $table->string('meta_title')->nullable();
            $table->text('meta_description')->nullable();
            $table->json('tags')->nullable();
            $table->enum('status', ['draft', 'published', 'archived'])->default('draft');
            $table->timestamps();
            
            $table->index(['blog_category_id', 'status']);
            $table->index(['author_id', 'status']);
            $table->index(['is_featured', 'is_published']);
            $table->fullText(['title_en', 'content_en']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('blogs');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000020_create_pages_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('pages', function (Blueprint $table) {
            $table->id();
            $table->string('title_en');
            $table->string('title_ar')->nullable();
            $table->string('slug')->unique();
            $table->longText('content_en');
            $table->longText('content_ar')->nullable();
            $table->text('excerpt_en')->nullable();
            $table->text('excerpt_ar')->nullable();
            $table->string('featured_image')->nullable();
            $table->string('page_type')->default('general');
            $table->boolean('show_in_menu')->default(false);
            $table->boolean('show_in_footer')->default(false);
            $table->integer('sort_order')->default(0);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->string('meta_title')->nullable();
            $table->text('meta_description')->nullable();
            $table->json('custom_fields')->nullable();
            $table->timestamps();
            
            $table->index(['page_type', 'status']);
            $table->index(['show_in_menu', 'sort_order']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('pages');
    }
};
```

CREATE FILE: database/migrations/2024_01_01_000021_create_sliders_table.php
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('sliders', function (Blueprint $table) {
            $table->id();
            $table->string('title_en');
            $table->string('title_ar')->nullable();
            $table->text('description_en')->nullable();
            $table->text('description_ar')->nullable();
            $table->string('image');
            $table->string('mobile_image')->nullable();
            $table->string('button_text_en')->nullable();
            $table->string('button_text_ar')->nullable();
            $table->string('button_url')->nullable();
            $table->boolean('button_target_blank')->default(false);
            $table->string